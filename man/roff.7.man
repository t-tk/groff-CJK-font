'\" t
.TH roff @MAN7EXT@ "@MDATE@" "groff @VERSION@"
.SH Name
roff \- concepts and history of roff typesetting
.
.
.\" TODO: Synchronize this material with introductory section(s) of our
.\" Texinfo manual, and then keep it that way.
.
.\" ====================================================================
.\" Legal Terms
.\" ====================================================================
.\"
.\" Copyright (C) 2000-2022 Free Software Foundation, Inc.
.\"
.\" This file is part of groff, the GNU roff type-setting system.
.\"
.\" Permission is granted to copy, distribute and/or modify this
.\" document under the terms of the GNU Free Documentation License,
.\" Version 1.3 or any later version published by the Free Software
.\" Foundation; with no Invariant Sections, with no Front-Cover Texts,
.\" and with no Back-Cover Texts.
.\"
.\" A copy of the Free Documentation License is included as a file
.\" called FDL in the main directory of the groff source package.
.
.
.\" Save and disable compatibility mode (for, e.g., Solaris 10/11).
.do nr *groff_roff_7_man_C \n[.cp]
.cp 0
.
.
.\" ====================================================================
.SH Description
.\" ====================================================================
.
The term
.I roff
denotes a family of document formatting systems known by names like
.IR troff ,
.IR nroff ,
and
.IR ditroff .
.
A
.I roff
system consists of an interpreter for an extensible text formatting
language and a set of programs for preparing output for various devices
and file formats.
.
Unix-like operating systems often distribute a
.I roff
system.
.
The manual pages on Unix systems
(\[lq]man\~pages\[rq])
and bestselling books on software engineering,
including Kernighan and Ritchie's
.I The C Programming Language
and W.\& Richard Stevens's
.I Advvanced Programming in the Unix Environment
are written using a
.I roff
system.
.
GNU
.IR roff \[em] groff \[em]is
arguably the most widespread
.I roff
implementation.
.
.
.P
This document
presents typographical concepts that form the common background of all
.I roff
implementations,
describes some of the development history of
.I roff
systems,
offers details of the
.I roff
pipeline which are usually managed by front ends like
.MR groff @MAN1EXT@ ,
surveys the formatting language,
suggests some tips for editing
.I roff
input files,
and recommends materials for further reading.
.
.
.\" ====================================================================
.SH Concepts
.\" ====================================================================
.
.\" BEGIN Keep roughly parallel with groff.texi nodes "Text" through
.\" "Tab Stops".
.I roff
input files contain text interspersed with instructions to control the
formatter.
.
Even in the absence of such instructions,
a
.I roff
formatter still processes its input in several ways,
by filling,
hyphenating,
breaking,
and adjusting it,
and supplementing it with inter-sentence space.
.
These processes are basic to typesetting,
and can be controlled at the input document's discretion.
.
.
.P
The formatter reads its input character by character,
collecting words as it goes,
and fits as many words together on an output line as it can\[em]this
is known as
.I filling.
.
To a
.I roff
system,
a
.I word
is any sequence of one or more characters that aren't
spaces,
tabs,
or newlines.
.
Words are separated by
spaces,
tabs,
newlines,
or
file boundaries.
.
.
.P
A
.I roff
formatter attempts to detect the boundaries between sentences,
and supplies additional inter-sentence space between them.
.
It does this by flagging certain characters
(normally
.RB \[lq] !\& \[rq],
.RB \[lq] ?\& \[rq],
and
.RB \[lq] .\& \[rq])
as potentially ending a sentence.
.
When the formatter encounters one of these
.I end-of-sentence characters
at the end of a line,
or one of them is followed by two spaces on the same input line,
it appends an inter-word space
followed by an inter-sentence space in the formatted output.
.
The non-printing input break escape sequence
.B \[rs]&
can be used after an end-of-sentence character to defeat end-of-sentence
detection on a per-instance basis.
.
Normally,
the occurrence of a visible non-end-of-sentence character
(as opposed to a space or tab)
immediately after an end-of-sentence
character cancels detection of the end of a sentence.
.
However,
several characters are treated
.I transparently
after the occurence of an end-of-sentence character.
.
That is,
a
.I roff
does not cancel end-of-sentence detection when it processes them.
.
This is because such characters are often used as footnote markers or to
close quotations and parentheticals.
.
The default set is
.BR \[dq] ,
.BR \[aq] ,
.BR ) ,
.BR ] ,
.BR * ,
.BR \[rs][dg] ,
.BR \[rs][dd] ,
.BR \[rs][rq] ,
and
.BR \[rs][cg] .
.
The last four are examples of
.I special characters,
escape sequences whose purpose is to obtain glyphs that are not easily
typed at the keyboard,
or which have special meaning to the formatter
(like
.B \[rs]
itself).
.
.
.P
When an output line is nearly full,
it is uncommon for the next word collected from the input to exactly
fill it\[em]typically,
there is room left over only for part of the next word.
.
The process of splitting a word so that it appears partially on one line
(with a hyphen to indicate to the reader that the word has been broken)
with its remainder on the next is
.I hyphenation.
.
Hyphenation points can be manually specified;
.I groff
also uses a hyphenation algorithm and language-specific pattern files to
decide which words can be hyphenated and where.
.
Hyphenation does not always occur even when the hyphenation rules for a
word allow it;
it can be disabled,
and when not disabled there are several parameters that can prevent it
in certain circumstances.
.
.
.P
Once an output line has been filled,
whether or not hyphenation has occurred on that line,
the next word read from the input will be placed on a different output
line;
this is called a
.I break.
.
In this document and in
.I roff
discussions generally,
a \[lq]break\[rq] if not further qualified always refers to the
termination of an output line.
.
When the formatter is filling text,
it introduces breaks automatically to keep output lines from exceeding
the configured line length.
.
After an automatic break,
a
.I roff
formatter
.I adjusts
the line if applicable
(see below),
and then resumes collecting and filling text on the next output line.
.
.
.br
.ne 2v
.P
Sometimes,
a line cannot be broken automatically.
.
This usually does not happen with natural language text unless the
output line length has been manipulated to be extremely short,
but it can with specialized text like program source code.
.
.I groff
provides a means of telling the formatter where the line may be broken
without hyphens.
.
This is done with the non-printing break point escape sequence
.BR \[rs]: .
.
.
.P
.\" What if the document author wants to stop filling lines temporarily,
.\" for instance to start a new paragraph?  There are several solutions.
There are several ways to cause a break at a predictable location.
.
A blank input line not only causes a break,
but by default it also outputs a one-line vertical space
(effectively a blank output line).
.
Macro packages may discourage or disable this \[lq]blank line
method\[rq] of paragraphing in favor of their own macros.
.
A line that begins with one or more spaces causes a break.
.
The spaces are output at the beginning of the next line without being
.I adjusted
(see below).
.
Again, macro packages may provide other methods of producing indented paragraphs.
.
Trailing spaces on
.I text lines
(see below)
are ignored.
.
The end of an input file causes a break.
.
.
.P
After the formatter performs an automatic line break,
it then tries to
.I adjust
the line:
inter-word spaces are widened until the text reaches the right margin.
.
Extra spaces between words are preserved.
.
Leading and trailing spaces are handled as noted above.
.
Text can be aligned to the left or right margins or centered using
.I requests.
.
.
.P
A
.I roff
formatter translates horizontal tab characters,
also called simply \[lq]tabs\[rq],
in the input into movements to the next tab stop.
.
These tab stops are by default located every half inch measured from the
current position on the input line.
.
With them,
simple tables can be made.
.
However,
this method can be deceptive,
as the appearance
(and width)
of the text in an editor and the results from the formatter can vary
greatly,
particularly when proportional typefaces are used.
.
A tab character does not cause a break and therefore does not interrupt
filling.
.
The formatter provides facilities for sophisticated table composition;
there are many details to track
when using the \[lq]tab\[rq] and \[lq]field\[rq] low-level features,
so most users turn to the
.MR @g@tbl @MAN1EXT@
preprocessor for table construction.
.\" END Keep roughly parallel with groff.texi nodes "Text" through "Tab
.\" Stops".
.
.
.\" ====================================================================
.SS "Page geometry"
.\" ====================================================================
.
.\" BEGIN Keep parallel with groff.texi node "Page Geometry".
.I roff
systems format text under certain assumptions about the size of the
output medium,
or page.
.
For the formatter to correctly break a line it is filling,
it must know the line length,
which it derives from the page width.
.\" (@pxref{Line Layout}).
.
For it to decide whether to write an output line to the current page or
wait until the next one,
it must know the page length.
.\" (@pxref{Page Layout}).
.
.
A device's
.I resolution
converts practical units like inches or centimeters to
.I basic units,
a convenient length measure for the output device or file format.
.
The formatter and output driver use basic units to reckon page
measurements.
.
The device description file defines its resolution and page dimensions
(see
.MR groff_font @MAN5EXT@ ).
.\" (@pxref{DESC File Format}).
.
.
.P
A
.I page
is a two-dimensional structure upon which a
.I roff
system imposes a coordinate system with its upper left corner as the
origin.
.
Coordinate values are in basic units and increase down and to the right.
Useful ones are therefore always positive and within numeric ranges
corresponding to the page boundaries.
.
.
.P
While the formatter
(and,
later,
output driver)
is processing a page,
it keeps track of its
.I drawing position,
which is the location at which the next glyph will be written,
from which the next motion will be measured,
or where a geometric primitive will commence rendering.
.
Notionally,
glyphs are drawn from the text baseline upward and to the right.
.RI ( groff
does not yet support right-to-left scripts.)
.
The
.I text baseline
is a
(usually invisible)
line upon which the glyphs of a typeface are aligned.
.
A glyph therefore \[lq]starts\[rq] at its bottom-left corner.
.
If drawn at the origin,
a typical letter glyph would lie partially or wholly off the page,
depending on whether,
like \[lq]g\[rq],
it features a decender below the baseline.
.
.
.P
Such a situation is nearly always undesirable.
.
It is furthermore conventional not to write or draw at the extreme edges
of the page.
.
Therefore the initial drawing position of a
.I roff
formatter is not at the origin,
but down and to the right of it.
.
This rightward shift
from the left edge is known as the
.I page offset.
.
.RI ( groff 's
terminal output devices have page offsets of zero.)
.
The downward shift leaves room for a text output line.
.
.
.P
Text is arranged on a one-dimensional lattice of text baselines from
the top to the bottom of the page.
.
.I Vertical spacing
is the distance between adjacent text baselines.
.
In ordinary circumstances,
this quantity is 120% of the type size.
.
The initial vertical drawing position is one unit of vertical spacing
below the page top.
.
Typographers have a name for this unit:
\[lq]vee\[rq].
.
.
.P
Vertical spacing has an impact on page-breaking decisions.
.
Generally,
when a break occurs,
the formatter moves the drawing position to the next text baseline
automatically.
.
If the formatter was already writing to the last line that would fit on
the page,
advancing by one vee would place the next text baseline off the page.
.
Rather than let that happen,
.I roff
formatters instruct the output driver to eject the page,
start a new one,
and reset the drawing position to one vee below the page top again;
this is a
.I page break.
.
.
.P
When the last line of input text is also the last output line that can
fit on the page,
the break caused by the end of the input file
will also break the page,
producing a useless blank one.
.
Macro packages keep users from having
to confront this difficulty by setting \[lq]traps\[rq];
.\" (@pxref{Traps});
moreover,
all but the simplest page layouts tend to have headers and footers,
or at least bear vertical margins larger than one vee.
.\" END Keep parallel with groff.texi node "Page Geometry".
.
.
.\" ====================================================================
.SS "Language elements"
.\" ====================================================================
.
Lines of input to any
.I roff
formatter can be classified as one of two types:
control lines and text lines.
.
.
.P
A
.I control line
starts with the
.I control character,
a dot
.RB ( .\& )
or the
.I no-break control character,
a neutral apostrophe
.RB ( \[aq] ).
.
Either control character is followed by zero or more spaces or tabs
and then an optional
.I request,
an instruction built in to the formatter.
.
Some requests take one or more
.I arguments,
which follow on the same line,
separated from the request name and each other only by spaces.
.
.
.P
Any input line that is not a control line is a
.I text line.
.
See section \[lq]Line continuation\[rq] in
.MR groff @MAN7EXT@
for an exception to this rule.
.
Text lines generally become formatted output.
.
To start a text line with the control or no-break control character,
prefix the character with the
.B \[rs]&
escape sequence.
.
.
.P
.I Escape sequences
start with the
.I escape character,
a backslash
.BR \[rs] ,
and are followed by at least one additional character.
.
They can appear anywhere in the input.
.
.
.P
With requests,
the escape and control characters can be changed;
further,
escape sequence recognition can be turned off and back on.
.
.
.P
.I Macros
permit the extension or replacement of the request repertoire.
.
Certain requests can be invoked to define a macro,
a user-directed abbreviation for a collection of input lines.
.
Macros are called on control lines much as requests are invoked,
albeit with occasional differences in argument handling.
.
When a macro is called,
its definition
(or \[lq]body\[rq])
is
.I interpolated,
as if typed at its call site.
.
Its contents are then parsed normally.
.
.
.P
.I Strings
store character sequences.
.
In
.IR groff ,
they can be parameterized as macros can.
.
.
.P
.I Registers
store numerical values,
including measurements.
.
The latter are generally in basic units;
.I scaling units
can be appended to numeric expressions to clarify their meaning when
stored or interpolated.
.
Some read-only predefined registers interpolate text.
.
.
.P
.I Fonts
are identified either by a name or by a mounting position
(a non-negative number).
.
Four font styles are available on all devices.
.
.B R
is \[lq]roman\[rq]:
normal,
upright text.
.
.B B
is
.BR bold ,
an upright typeface with a heavier weight.
.
.B I
is
.IR italic ,
a face that is oblique on typesetter output devices and usually
underlined instead on terminal devices.
.
.B BI
is \f[BI]bold-italic\f[]\/, \" indulging a bit of man(7) evil here
combining both of the foregoing style variations.
.
Typesetter devices typically offer one or more
.I special
fonts as well;
they provide glyphs that are not available in the multiple styles of
text fonts.
.
.
.P
.I groff
supports named
.I colors
for glyph rendering and drawing of geometric primitives.
.
Stroke and fill colors are distinct;
the stroke color is used for glyphs.
.
.
.P
.I Glyphs
are visual representation forms of
.I characters.
.
In
.I groff,
the distinction between those two elements is not always obvious
(and a full discussion is beyond our scope).
.
To roughly characterize,
\[lq]A\[rq] is a character when we consider it in the abstract:
to make it a glyph,
we must select a typeface with which to render it,
and determine its type size and color.
.
The formatting process turns input characters into output glyphs.
.
A few characters commonly seen on keyboards are treated
specially by
.I roff
languages and may not look correct in output if used unthinkingly;
they are
the (double) quotation mark
.RB ( \[dq] ),
the neutral apostrophe
.RB ( \[aq] ),
the minus sign
.RB ( \- ),
the backslash
.RB ( \[rs] ),
the caret or circumflex accent
.RB ( \[ha] ),
the grave accent
.RB ( \[ga] ),
and the tilde
.RB ( \[ti] ).
.
All are available via
.I special character
escape sequences,
along with numerous other symbols;
see
.MR groff_char @MAN7EXT@ .
.
.
.\" BEGIN Keep roughly parallel with first paragraphs of groff.texi node
.\" "Deferring Output".
.P
A further few language elements arise as page layouts become more
sophisticated and demanding.
.
.I Environments
collect formatting parameters like line length and typeface.
.
A
.I diversion
stores formatted output for later use.
.
A
.I trap
is a condition on the input or output,
tested automatically by the formatter,
that is associated with a macro,
causing it to be called when that condition is fulfilled.
.
.
.P
Footnote support often exercises all three of the foregoing features.
.
A simple implementation might work as follows.
.
A pair of macros is defined:
one starts a footnote and the other ends it.
.
The author calls the first macro where a footnote marker is desired.
.
The macro establishes a diversion so that the footnote text is collected
at the place in the body text where its corresponding marker appears.
.
An environment is created for the footnote so that it is set at a
smaller typeface.
.
The footnote text is formatted in the diversion using that environment,
but it does not yet appear in the output.
.
The document author calls the footnote end macro,
which returns to the previous environment and ends the diversion.
.
Later,
after much more body text in the document,
a trap,
set a small distance above the page bottom,
is sprung.
.
The macro called by the trap draws a line across the page and emits the
stored diversion.
.
Thus,
the footnote is rendered.
.\" END Keep roughly parallel with first paragraphs of groff.texi node
.\" "Deferring Output".
.
.
.\" ====================================================================
.SH History
.\" ====================================================================
.
Computer-driven document formatting dates back to the 1960s.
.\" John Labovitz points out that Peter Samson's TJ-2 dates to 1963,
.\" but since this is a *roff man page, we do not begin our story there.
.\" https://johnlabovitz.com/publications/\
.\" The-electric-typesetter--The-origins-of-computing-in-typography.pdf
.
The
.I roff
system itself is intimately connected with the Unix operating system,
but its roots go back to the earlier operating systems CTSS,
GECOS,
and Multics.
.
.
.\" ====================================================================
.SS "The predecessor\[em]\f[I]RUNOFF\f[]"
.\" ====================================================================
.
.IR roff 's
ancestor
.I RUNOFF
was written in the MAD language by Jerry Saltzer
to prepare his Ph.D.\& thesis using the Compatible Time Sharing System
(CTSS),
a project of the Massachusetts Institute of Technology (MIT).
.
The program is generally referred to in full capitals,
both to distinguish it from its many descendants,
and because bits were expensive in those days;
five- and six-bit character encodings were still in widespread usage,
and mixed-case alphabetics seen as a luxury.
.
.I RUNOFF
introduced a syntax of inlining formatting directives amid document
text,
by beginning a line with a period
(an unlikely occurrence in human-readable material)
followed by a \[lq]control word\[rq].
.
Control words with obvious meaning like \[lq].line length
.IR n \[rq]
were supported as well as an abbreviation system;
the latter came to overwhelm the former in popular usage and later
derivatives of the program.
.
A sample of control words from a
.UR http://\:web\:.mit\:.edu/\:Saltzer/\:www/\:publications/\:ctss/\:AH\
\:.9\:.01\:.html
.I RUNOFF
manual of December 1966
.UE
was documented as follows
(with the parameter notation slightly altered).
.
The abbreviations will be familiar to
.I roff
veterans.
.
.
.P
.ne 10v
.TS
center;
r l
rB l.
Abbreviation	Control word
\&.ad	.adjust
\&.bp	.begin page
\&.br	.break
\&.ce	.center
\&.in	.indent \f[I]n\f[]
\&.ll	.line length \f[I]n\f[]
\&.nf	.nofill
\&.pl	.paper length \f[I]n\f[]
\&.sp	.space [\f[I]n\f[]]
.TE
.
.
.P
In 1965,
MIT's Project MAC teamed with Bell Telephone Laboratories and General
Electric (GE) to inaugurate the
.UR http://\:www\:.multicians\:.org
Multics
.UE
project.
.
After a few years,
Bell Labs discontinued its participation in Multics,
famously prompting the development of Unix.
.
Meanwhile,
Saltzer's
.I RUNOFF
proved influential,
seeing many ports and derivations elsewhere.
.
.
.\" "Morris did one port and called it roff. I did the BCPL one, adding
.\" registers, but not macros. Molly Wagner contributed a hyphenation
.\" algorithm. Ken and/or Dennis redid roff in PDP-11 assembler. Joe
.\" started afresh for the grander nroff, including macros. Then Joe
.\" bought a phototypesetter ..."
.\" -- https://minnie.tuhs.org/pipermail/tuhs/2018-November/017052.html
.P
In 1969,
Doug McIlroy wrote one such reimplementation,
adding extensions,
in the BCPL language for a GE 645 running GECOS at the Bell Labs
location in Murray Hill,
New Jersey.
.
In its manual,
the control commands were termed \[lq]requests\[rq],
their two-letter names were canonical,
and the control character was configurable with a
.B .cc
request.
.
Other familiar requests emerged at this time;
no-adjust
.RB ( .na ),
need
.RB ( .ne ),
page offset
.RB ( .po ),
tab configuration
.RB ( .ta ,
though it worked differently),
temporary indent
.RB ( .ti ),
character translation
.RB ( .tr ),
and automatic underlining
.RB ( .ul ;
on
.I RUNOFF
you had to backspace and underscore in the input yourself).
.B .fi
to enable filling of output lines got the name it retains to this day.
.
.I roff
also featured a heuristic system for automatically placing hyphenation
points,
designed and implemented by Molly Wagner.
.
It furthermore introduced numeric variables,
termed registers.
.
By 1971,
this program had been ported to Multics and was known as
.IR roff ,
a name McIlroy attributes to Bob Morris,
to distinguish it from CTSS
.IR RUNOFF .
.
.\" GBR can't find a source for this claim (of Bernd's).
.\"Multics
.\".I runoff
.\"added features such as the ability to do two-pass formatting;
.\"it became the main system for Multics documentation and text
.\"processing.
.
.
.\" ====================================================================
.SS "Unix and \f[I]roff\f[]"
.\" ====================================================================
.
McIlroy's
.I roff
was one of the first Unix programs.
.
in Dennis Ritchie's term,
it was \[lq]transliterated\[rq] from BCPL to DEC PDP-7 assembly language
.\" see "The Evolution of the Unix Time-Sharing System", Ritchie, 1984
for the fledgling Unix operating system.
.
Automatic hyphenation was managed with
.B .hc
and
.B .hy
requests,
line spacing control was generalized with the
.B .ls
request,
and what later
.IR roff s
would call diversions were available via \[lq]footnote\[rq] requests.
.\" The foregoing features may have been in McIlroy's Multics roff, but
.\" he no longer has documentation for that--only the GECOS version.
.\" GBR's guess is that they were, if we take Ritchie's choice of the
.\" term "transliterated" seriously.  GBR further speculates that there
.\" is no reason to suppose that McIlroy's roff was stagnant from
.\" 1969-1971, whereas we have no record of any significant
.\" post-transliteration development of Unix roff.  Its request list did
.\" not appear until the 3rd edition manual, and did not change
.\" thereafter.  In 7th edition, roff was characterized as "utterly
.\" frozen".
.
This
.I roff
indirectly funded operating systems research at Murray Hill,
for it was used to prepare patent applications for AT&T to the U.S.\&
government.
.
This arrangement enabled the group to acquire a PDP-11;
.I roff
promptly proved equal to the task of typesetting the manual for what
would become known as \[lq]First Edition Unix\[rq],
dated November 1971.
.
.
.P
Output from all of the foregoing programs was limited to line printers
and paper terminals such as the IBM 2471
(based on the Selectric line of typewriters)
and the Teletype Corporation Model 37.
.
Proportionally-spaced type was unknown.
.
.
.\" ====================================================================
.SS "New \f[I]roff\f[] and Typesetter \f[I]roff\f[]"
.\" ====================================================================
.
The first years of Unix were spent in rapid evolution.
.
The practicalities of preparing standardized documents like patent
applications
(and Unix manual pages),
combined with McIlroy's enthusiasm for macro languages,
perhaps created an irresistible pressure to make
.I roff
extensible.
.
Joe Ossanna's
.IR nroff ,
literally a \[lq]new roff\[rq],
was the outlet for this pressure.
.
.\" nroff is listed in the table of contents of the Version 2 manual,
.\" but no man page is present.
By the time of Unix Version\~3
(February 1973)\[em]and still in PDP-11 assembly language\[em]it sported
a swath of features now considered essential to
.I roff
systems:
.
definition of macros
.RB ( .de ),
diversion of text thence
.RB ( .di ),
and removal thereof
.RB ( .rm );
.
trap planting
.RB ( .wh ;
\[lq]when\[rq])
and relocation
.RB ( .ch ;
\[lq]change\[rq]);
.
conditional processing
.RB ( .if );
.
and environments
.RB ( .ev ).
.
Incremental improvements included
.
assignment of the next page number
.RB ( .pn );
.
no-space mode
.RB ( .ns )
and restoration of vertical spacing
.RB ( .rs );
.
the saving
.RB ( .sv )
and output
.RB ( .os )
of vertical space;
.
specification of replacement characters for tabs
.RB ( .tc )
and leaders
.RB ( .lc );
.
configuration of the no-break control character
.RB ( .c2 );
.
shorthand to disable automatic hyphenation
.RB ( .nh );
.
a condensation of what were formerly six different requests for
configuration of page \[lq]titles\[rq]
(headers and footers)
into one
.RB ( .tl )
with a length controlled separately from the line length
.RB ( .lt );
.
automatic line numbering
.RB ( .nm );
.
interactive input
.RB ( .rd ),
which necessitated buffer-flushing
.RB ( .fl ),
and was made convenient with early program cessation
.RB ( .ex );
.
source file inclusion in its modern form
.RB ( .so ;
though
.I RUNOFF
had an \[lq].append\[rq] control word for a similar purpose)
and early advance to the next file argument
.RB ( .nx );
.
ignorable content
.RB ( .ig );
.
and programmable abort
.RB ( .ab ).
.
.
.P
Third Edition Unix also brought the
.MR pipe 2
system call,
the explosive growth of a componentized system based around it,
and a \[lq]filter model\[rq] that remains perceptible today.
.
Equally importantly,
the Bell Labs site in Murray Hill acquired a Graphic Systems C/A/T
phototypesetter,
and with it came the necessity of expanding the capabilities of a
.I roff
system to cope with proportionally-spaced type,
multiple type sizes,
and a variety of fonts.
.
Ossanna wrote a parallel implementation of
.I nroff
for the C/A/T,
dubbing it
.I troff
(for \[lq]typesetter roff\[rq]).
.
Unfortunately,
surviving documentation does not illustrate what requests were
implemented at this time for C/A/T support;
the
.MR troff 1 \" AT&T
man page in Fourth Edition Unix
(November 1973)
does not feature a request list, \" nor does Unix V6 troff(1) (1975)
unlike
.MR nroff 1 . \" AT&T
.
Apart from typesetter-driven features,
Unix Version\~4
.IR roff s
added string definitions
.RB ( .ds );
made the escape character configurable
.RB ( .ec );
and enabled the user to write diagnostics to the standard error stream
.RB ( .tm ).
.
Around 1974,
empowered with multiple type sizes,
italics,
and a symbol font specially commissioned by Bell Labs from
Graphic Systems,
Brian Kernighan and Lorinda Cherry implemented
.I eqn \" AT&T
for typesetting mathematics.
.
.
In the same year,
for Fifth Edition Unix,
Ossanna combined and reimplemented the two
.IR roff s
in C,
using preprocessor conditions of that language to generate both from a
single source tree.
.
.
.P
Ossanna documented the syntax of the input language to the
.I nroff
and
.I troff
programs in the \[lq]Troff User's Manual\[rq],
first published in 1976,
with further revisions as late as 1992 by Kernighan.
.
(The original version was entitled
\[lq]Nroff/Troff User's Manual\[rq],
which may partially explain why
.I roff
practitioners have tended to refer to it by its AT&T document
identifier,
\[lq]CSTR #54\[rq].)
.
Its final revision serves as the
.I de facto
specification of AT&T
.IR troff , \" AT&T
and all subsequent implementors of
.I roff
systems have done so in its shadow.
.
.
.P
A small and simple set of
.I roff
macros was first used for the manual pages of Unix Version\~4 and
persisted for two further releases,
but the first macro package to be formally described and installed was
.I ms
by Michael Lesk in Version\~6.
.
He also wrote a manual,
\[lq]Typing Documents on the Unix System\[rq],
describing
.I ms
and basic
.IR nroff / troff
usage,
updating it as the package accrued features.
.
Sixth Edition additionally saw the debut of the
.I tbl \" AT&T
preprocessor for formatting tables,
also by Lesk.
.
.
.P
For Unix Version\~7
(January 1979),
McIlroy designed,
implemented,
and documented the
.I man
macro package,
introducing most of the macros described in
.MR groff_man 7
today,
and edited volume 1 of the Version 7 manual using it.
.
Documents composed using
.I ms
featured in volume 2,
edited by Kernighan.
.
.
.P
Ossanna had passed away unexpectedly in 1977,
and after the release of Version 7,
with the C/A/T typesetter becoming supplanted by alternative devices
such as the Mergenthaler Linotron 202,
Kernighan undertook a revision and rewrite of
.I troff
to generalize its design.
.
To implement this revised architecture,
he developed the font and device description file formats and the
device-independent output format that remain in use today.
.
He described these novelties in the article
\[lq]A Typesetter-independent TROFF\[rq],
last revised in 1982,
and like the
.I troff
manual itself,
it is widely known by a shorthand,
\[lq]CSTR #97\[rq].
.\" Further entertaining reading can be found at:
.\" <https://www.cs.princeton.edu/~bwk/202/summer.reconstructed.pdf>.
.
.
.P
Kernighan's innovations prepared
.I troff
well for the introduction of the Adobe PostScript language in 1982 and a
vibrant market in laser printers with built-in interpreters for it.
.
An output driver for PostScript,
.IR dpost ,
was swiftly developed.
.
However,
due to AT&T software licensing practices,
Ossanna's
.IR troff ,
with its tight coupling to the capabilities of the C/A/T,
remained in parallel distribution with device-independent
.I troff
throughout the 1980s,
leading some developers to contrive translators for C/A/T-formatted
documents to other devices.
.
An example was
.I vtroff
for Versatec and Benson-Varian plotters.
.
Today,
however,
all actively maintained
.IR troff s
follow Kernighan's device-independent design.
.
.
.\" ====================================================================
.SS "\f[I]groff\f[]\[em]a free \f[I]roff\f[] from GNU"
.\" ====================================================================
.
The most important free
.I roff
project historically has been
.IR groff ,
the GNU implementation of
.IR troff ,
developed from scratch by James Clark starting in 1989 and distributed
under
.UR http://\:www\:.gnu\:.org/\:copyleft
copyleft
.UE
licenses,
ensuring to all the availability of source code and the freedom to
modify and redistribute it,
properties unprecedented in
.I roff
systems to that point.
.
.I groff
rapidly attracted contributors,
and has served as a complete replacement for almost all applications of
AT&T
.I troff
(exceptions include
.IR mv ,
a macro package for preparation of viewgraphs and slides,
and the
.I ideal
preprocessor for producing diagrams from a constraint-based language).
.
Beyond that,
it has added numerous features;
see
.MR groff_diff @MAN7EXT@ .
.
Since its inception and for at least the following three decades,
it has been used by practically all GNU/Linux and BSD operating systems.
.
.
.P
.I groff
continues to be developed,
is available for almost all operating systems in common use
(along with several obscure ones),
and it is free.
.
These factors make
.I groff
the
.I de facto
.I roff
standard today.
.
.
.\" ====================================================================
.SS "Heirloom Doctools \f[I]troff\f[]"
.\" ====================================================================
.\" XXX GBR leaves off here.
.
An alternative is
.UR https://\:github\:.com/\:n\-t\-roff/\:heirloom\-doctools
.I Gunnar Ritter's Heirloom roff project
.UE
project, started in 2005, which provides enhanced versions of the
various roff tools found in the OpenSolaris and Plan\~9 operating
systems, now available under free licenses.
.
You can get this package with the shell command:
.RS
.EX
\[Do] git clone https://github.com/n\-t\-roff/heirloom\-doctools
.EE
.RE
.
.
.P
Moreover, one finds there the
.UR https://\:github\:.com/\:n\-t\-roff/\:DWB3.3
.I Original Documenter's Workbench Release 3.3
.UE .
.
.
.\" ====================================================================
.SH "Using \f[I]roff\f[]"
.\" ====================================================================
.
Many people use
.I roff
frequently without knowing it.
.
When you read a system manual page
(man page),
it is often a
.I roff
working in the background to render it.
.
But using a
.I roff
explicitly isn't difficult.
.
.
.P
Some
.I roff
implementations provide wrapper programs that make it easy to use the
.I roff
system from the shell's command line.
.
These can be specific to a macro package,
like
.MR mmroff @MAN1EXT@ ,
or more general.
.
.MR groff @MAN1EXT@
provides command-line options sparing the user from constructing the
long,
order-dependent pipelines familiar to AT&T
.I troff
users.
.
Further,
a heuristic program,
.MR grog @MAN1EXT@ ,
is available to infer from a document's contents which
.I groff
arguments should be used to process it.
.
.
.\" ====================================================================
.SS "The \f[I]roff\f[] pipeline"
.\" ====================================================================
.
Each
.I roff
system consists of preprocessors,
one or more
.I roff
formatter programs,
and a set of output drivers
(or \[lq]device postprocessors\[rq]).
.
This arrangement is designed to take advantage of a landmark Unix
innovation in inter-process communication:
the pipe.
.
That is,
a series of programs termed a \[lq]pipeline\[rq] is called together
.\" in an indeterminate order :P
where the output of each program in the sequence is taken as the input
for the next program,
without (necessarily) passing through temporary files on a disk.
.
(On non-Unix systems,
pipelines may have to be simulated.)
.
.
.RS
.PP
.EX
.RI $\~ preproc1 \~\c
.BI <\~ input-file \~|\~ preproc2 \~|\~\c
.RB .\|.\|.\&\~ "| troff\~"\c
.BI [ option\~\c
.RB "\~.\|.\|.\&]\~" \[rs]
.BI "    |\~" output-driver \" 4 leading spaces
.EE
.RE
.
.
.P
Once all preprocessors have run,
they deliver a pure
.I roff
document to the formatter,
which in turn generates intermediate output that is fed into an output
driver for viewing,
printing,
or further processing.
.
.
.P
All of these parts use programming languages of their own;
each language is totally unrelated to the other parts.
.
Moreover,
.I roff
macro packages that are tailored for special purposes can be included.
.
.
.P
Most
.I roff
input files use the macros of a document formatting package,
intermixed with instructions for one or more preprocessors,
seasoned with escape sequences and requests directly from the
.I roff
language.
.
Some documents are simpler still,
since their formatting packages discourage direct use of
.I roff
requests;
man pages are a prominent example.
.
The full power of the
.I roff
formatting language is seldom needed by users;
only programmers of macro packages need a substantial command of it.
.
.
.
.\" ====================================================================
.SS Preprocessors
.\" ====================================================================
.
A
.I roff
preprocessor is any program that generates output that syntactically
obeys the rules of the
.I roff
formatting language.
.
Each preprocessor defines a language of its own that is translated
into
.I roff
code when run through the preprocessor program.
.
Parts written in these languages may be included within a
.I roff
document; they are identified by special
.I roff
requests or macros.
.
Each document that is enhanced by preprocessor code must be run
through all corresponding preprocessors before it is fed into the
actual
.I roff
formatter program, for the formatter just ignores all alien code.
.
The preprocessor programs extract and transform only the document
parts that are determined for them.
.
.
.P
There are a lot of free and commercial
.I roff
preprocessors.
.
Some of them aren't available on each system, but there is a small
set of preprocessors that are considered as an integral part of each
.I roff
system.
.
The classical preprocessors are
.
.RS
.TS
tab (@);
lb l.
tbl@for tables.
eqn@for mathematical formulae.
pic@for drawing diagrams.
refer@for bibliographic references.
soelim@for including macro files from standard locations.
chem@for drawing chemical formul\[ae].
.TE
.RE
.
.
.P
Other known preprocessors that are not available on all systems
include
.
.RS
.TS
tab (@);
lb l.
grap@for constructing graphical elements.
grn@for including \fBgremlin\fR(1) pictures.
.TE
.RE
.
.
.\" ====================================================================
.SS "Formatter programs"
.\" ====================================================================
.
In the context of
.I roff
systems,
the formatter is the program that parses documents written in the
.I roff
language.
.
It generates intermediate output,
which is intended to be fed into an output driver
(also known as a device postprocessor),
the identity of which must be known prior to processing.
.
The documents must already have been run through all necessary
preprocessors to render correctly.
.
.
.P
The output produced by a
.I roff
formatter is represented in another language,
termed the \[lq]intermediate output format\[rq].
.
As noted in section \[lq]History\[rq] above,
this language was first specified in CSTR\~#97;
GNU extensions to it are documented in
.MR groff_out @MAN5EXT@ .
.
Intermediate output is in specialized in its parameters,
but not its syntax,
for the output driver used;
the format is
.RI device- independent ,
but not
.RI device- agnostic .
.
.
.P
The formatter is the heart of the
.I roff
system.
.
AT&T
had two formatters:
.I nroff
for terminals,
and
.I troff
for typesetters.
.
.
.P
Often,
the name
.I troff
is used as a general term to refer to both formatters.
.
When speaking that generally,
.I groff
documentation prefers the term
.RI \[lq] roff \[rq].
.
.
.\" ====================================================================
.SS "Devices and output drivers"
.\" ====================================================================
.
To a
.I roff
system,
a
.I device
is a hardware interface like a printer,
a text or graphical terminal,
or a standardized file format that unrelated software can interpret.
.
.
.P
A
.I roff
output driver is a program that parses the device-independent
intermediate output format of
.I troff
and produces instructions specific to the device or file format it
supports.
.
.
.P
The names of the devices and their driver programs are not standardized.
.
Technologies change;
the devices used for document preparation have greatly changed since
CSTR\~#54 was first written in the 1970s.
.
Such hardware is no longer used in production environments,
and device capabilities
(including resolution,
color drawing,
and font repertoire)
have tended to increase.
.
The PostScript output driver
.MR dpost 1
from an AT&T
.I troff
of 1980s vintage had a resolution of 720 units per inch,
whereas
.IR groff 's
.MR grops @MAN1EXT@
uses 72 000.
.
.
.\".P
.\"Today the operating systems provide device drivers for most
.\"printer-like hardware, so it isn't necessary to write a special
.\"hardware postprocessor for each printer.
.\" XXX?  No they don't.  Instead printers interpret PS or PDF directly.
.\" With a TCP/IP protocol stack and an HTTP server to accept POSTed
.\" documents for printing.
.
.
.\" ====================================================================
.SH "\f[I]roff\f[] programming"
.\" ====================================================================
.
Documents using
.I roff
are normal text files interleaved with
.I roff
formatting elements.
.
.I roff
languages are powerful enough to support arbitrary computation and
supply facilities that encourage their extension.
.
The primary such facility is macro definition;
with this feature,
macro packages have been developed that are tailored for particular
applications.
.
.
.\" ====================================================================
.SS "Macro packages"
.\" ====================================================================
.
Macro packages can have a much smaller vocabulary than
.I roff
itself;
this trait combined with their domain-specific nature can make them easy
to acquire and master.
.
The macro definitions of a package are typically kept in a file called
.IB name .tmac
(historically,
.BI tmac. name\/\c\" Italic correction comes before \c !
).
.
All tmac files are stored in one or more directories at standardized
positions.
.
Details on the naming of macro packages and their placement is found
in
.MR groff_tmac @MAN5EXT@ .
.
.
.P
A macro package anticipated for use in a document can be delcared to
the formatter by the command-line option
.BR \-m ;
see
.MR @g@troff @MAN1EXT@ .
.
It can alternatively be specified within a document using the file
inclusion requests of the
.I roff
language; see
.MR groff @MAN7EXT@ .
.
.
.P
Well-known macro packages include
.I man
for traditional man pages and
.I mdoc
for BSD-style manual pages.
.
Macro packages for typesetting books,
articles,
and letters include
.I ms
(from \[lq]manuscript macros\[rq]),
.I me
(named by a system administrator from the first name of its creator,
Eric Allman),
.I mm
(from \[lq]memorandum macros\[rq]),
and
.IR mom ,
a punningly-named package exercising many
.I groff
extensions.
.
.
.\" ====================================================================
.SS "The \f[I]roff\f[] formatting language"
.\" ====================================================================
.
The canonical reference for the AT&T
.I troff
language is Ossanna's \[lq]Troff User's Manual\[rq],
CSTR\~#54,
in its 1992 revision by Kernighan.
.
.I roff
languages provide requests,
escape sequences,
macro definition facilities,
string variables,
registers for storage of numbers or dimensions,
and control of execution flow.
.
The theoretically-minded will observe that a
.I roff
is not a mere markup language,
but Turing-complete,
and would be even stripped of its macro-definition facility.
.
It has storage
(registers);
it can perform tests
(as in conditional expressions like
.RB \[lq] "(\[rs]n[i] >= 1)" \[rq]);
and it can jump or branch using the
.B .if
request.
.
.
.P
.I Requests
and
.I escape sequences
are instructions,
predefined parts of the language,
that perform formatting operations or otherwise change the state of the
parser.
.
The user can define their own request-like elements by composing
together text,
requests,
and escape sequences
.IR "ad libitum" .
.
.
A document writer will not
(usually)
note any difference in usage for requests or macros;
both are written on a line on their own starting with a dot.
.
However,
there is a distinction;
requests take either a fixed number of arguments
(sometimes zero),
silently ignoring any excess,
or consume the rest of the input line,
whereas macros can take a variable number of arguments.
.
Since arguments are separated by spaces,
macros require a means of embedding a space in an argument;
in other words,
of quoting it.
.
This then demands a mechanism of embedding the quoting character itself,
in case
.I it
is needed literally in a macro argument.
.
AT&T
.I troff
had complex rules involving the placement and repetition of the double
quote to achieve both aims.
.
.I groff
cuts this knot by supporting a special character escape sequence for the
double quote,
.RB \[lq] \[rs][dq] \[rq] ,
which never performs quoting in the typesetting language,
but is simply a glyph,
.RB \[oq] \[dq] \[cq].
.
.
.P
.I Escape sequences
start with a backslash,
.RB \[lq] \[rs] \[rq].
.
They can appear almost anywhere,
even in the midst of text on a line,
and implement various features,
including the insertion of special characters with
.RB \[lq] \[rs]( \[rq]
or
.RB \[lq] \[rs][] \[rq],
break suppression at input line endings with
.RB \[lq] \[rs]c \[rq],
font changes with
.RB \[lq] \[rs]f \[rq],
type size changes with
.RB \[lq] \[rs]s \[rq],
in-line comments with
.RB \[lq] \[rs]\[dq] \[rq],
and many others.
.
.
.P
.I Strings
are variables that can store a string.
.
A string is stored by the
.B .ds
request.
.
The stored string can be retrieved later by the
.B \[rs]*
escape sequence.
.
.
.P
.I Registers
store numbers and sizes.
.
A register can be set with the request
.B .nr
and its value can be retrieved by the escape sequence
.BR "\[rs]n" .
.
.
.\" ====================================================================
.SH "File name extensions"
.\" ====================================================================
.
Manual pages
(man\~pages)
take the section number as a file name extension,
e.g.,
the file name for this document is
.IR roff.7 ,
i.e., it is kept in section\~7
of the man pages.
.
.
.P
The classical macro packages take the package name as an extension,
e.g.,
.RI file .me
for a document using the
.I me
macro package,
.RI file .mm
for
.IR mm ,
.RI file .ms
for
.IR ms ,
.RI file .pic
for
.I pic
files,
and so on.
.
.
.P
There is no general naming scheme for
.I roff
documents,
though
.RI file .t
for \[lq]troff file\[rq] is seen now and then.
.
.
.P
File name extensions can be handy in conjunction with the
.MR less 1
pager.
.
It provides the possibility to feed all input into a command-line pipe
that is specified in the shell environment variable
.IR LESSOPEN .
.
This process is not well documented,
so here is an example.
.
.RS
.P
.EX
LESSOPEN=\[aq]|lesspipe %s\[aq]
.EE
.RE
.
.
.P
where
.I lesspipe
is either a system-supplied command or a shell script of your own.
.
.
.P
See
.MR groff_filenames @MAN5EXT@
for more on file name extensions.
.
.
.\" BEGIN Keep parallel with groff.texi node "Input Conventions".
.\" ====================================================================
.SH "Input conventions"
.\" ====================================================================
.
Since
.I @g@troff
fills text automatically,
it is common practice in
.I roff
languages to avoid visual composition of text in input files:
the esthetic appeal of the formatted output is what matters.
.
Therefore,
.I roff
input should be arranged such that it is easy for authors and
maintainers to compose and develop the document,
understand the syntax of
.I roff
requests,
macro calls,
and preprocessor languages used,
and predict the behavior of the
formatter.
.
Several traditions have accrued in service of these goals.
.
.
.IP \[bu] 2n
Break input lines after sentence-ending punctuation to ease their
recognition.
.\" Texinfo: (@pxref{Sentences}).
It is frequently convenient to break after colons and semicolons as
well,
as these typically precede independent clauses.
.
Consider breaking after commas;
they often occur in lists that become easy to scan when itemized by
line,
or constitute supplements to the sentence that are added,
deleted,
or updated to clarify it.
.
Parenthetical and quoted phrases are also good candidates for placement
on input lines by themselves.
.
In filled text,
spaces and newlines are interchangeable;
place breaks where it aids your purpose.
.
.
.IP \[bu]
Set your text editor's line length to 72 characters or fewer;
see the subsections below.
.\" Texinfo:
.\" @footnote{Emacs: @code{fill-column: 72}; Vim: @code{textwidth=72}}
.
This limit,
combined with the previous advice regarding breaking around punctuation,
makes it less common that an input line will wrap in your text editor,
and thus will help you perceive excessively long constructions in your
text.
.
Recall that natural languages originate in speech,
not writing,
and that punctuation is correlated with pauses for breathing and changes
in prosody.
.
.
.IP \[bu]
Use
.B \[rs]&
after
.RB \[lq] !\& \[rq],
.RB \[lq] ?\& \[rq],
and
.RB \[lq] .\& \[rq]
if they are followed by space,
tab,
or newline characters and don't end a sentence.
.
.
.IP \[bu]
In filled text lines,
use
.B \[rs]&
before
.RB \[lq] .\& \[rq]
and
.RB \[lq] \[aq] \[rq]
if they are preceded by space,
so that reflowing the input doesn't turn them into control lines.
.
.
.IP \[bu]
Do not attempt to format the input in a WYSIWYG manner
(i.e.,
don't try using spaces to get proper indentation or align columns of a
table).
.
.
.IP \[bu]
Comment your document.
.
It is never too soon to apply comments to record information of use to
future document maintainers
(including your future self).
.\" Texinfo: We thus introduce another escape sequence, @code{\"}, which
The
.B \[rs]\[dq]
escape sequence
causes
.I @g@troff
to ignore the remainder of the input line.
.
.
.IP \[bu]
Use the empty request\[em]a control character followed immediately by a
newline\[em]to visually manage separation of material in input files.
.
Many of the
.I groff
project's own documents use an empty request between sentences,
after macro definitions,
and where a break is expected,
and two empty requests between paragraphs or other requests or macro
calls that will introduce vertical space into the document.
.
You can combine the empty request with the comment escape sequence to
include whole-line comments in your document,
and even \[lq]comment out\[rq] sections of it.
.
.
.P
.\" Texinfo: We conclude this section with an example
An example sufficiently long to illustrate most of the above suggestions
in practice follows.
.
.\" Texinfo: For the purpose of fitting the example between the margins
.\" of this manual with the font used for its typeset version,
.\" we have shortened the input line length to 56
.\" columns.
.\" Texinfo: As before,
.
An arrow \[->] indicates a tab character.
.
.
.P
.RS
.EX
\&.\[rs]"   nroff this_file.roff | less
\&.\[rs]"   groff \-T ps this_file.roff > this_file.ps
\[->]The theory of relativity is intimately connected with
the theory of space and time.
\&.
I shall therefore begin with a brief investigation of
the origin of our ideas of space and time,
although in doing so I know that I introduce a
controversial subject.  \[rs]" remainder of paragraph elided
\&.
\&.
\&
\[->]The experiences of an individual appear to us arranged
in a series of events;
in this series the single events which we remember
appear to be ordered according to the criterion of
\[rs][lq]earlier\[rs][rq] and \[rs][lq]later\[rs][rq], \[rs]" punct \
swapped
which cannot be analysed further.
\&.
There exists,
therefore,
for the individual,
an I\-time,
or subjective time.
\&.
This itself is not measurable.
\&.
I can,
indeed,
associate numbers with the events,
in such a way that the greater number is associated with
the later event than with an earlier one;
but the nature of this association may be quite
arbitrary.
\&.
This association I can define by means of a clock by
comparing the order of events furnished by the clock
with the order of a given series of events.
\&.
We understand by a clock something which provides a
series of events which can be counted,
and which has other properties of which we shall speak
later.
\&.\[rs]" Albert Einstein, _The Meaning of Relativity_, 1922
.EE
.RE
.\" END Keep parallel with groff.texi node "Input Conventions".
.
.
.\" ====================================================================
.SS "Editing with Emacs"
.\" ====================================================================
.
Official GNU doctrine holds that the best program for editing a
.I roff
document is Emacs; see
.MR emacs 1 .
.
It provides an
.I nroff
major mode that is suitable for all kinds of
.I roff
dialects.
.
This mode can be activated by the following methods.
.
.
.P
When editing a file within Emacs the mode can be changed by typing
.RI \[lq] M-x
.BR nroff\-mode \[rq],
where
.I M-x
means to hold down the meta key
(often labelled \[lq]Alt\[rq])
while pressing and releasing the \[lq]x\[rq] key.
.\" Why is this sort of thing not in intro(1)?
.
.
.P
It is also possible to have the mode automatically selected when a
.I roff
file is loaded into the editor.
.
.
.IP \(bu 2n
The most general method is to include file-local variables at the end of
the file;
we can also configure the fill column this way.
.
.
.RS
.IP
.EX
\&.\[rs]" Local Variables:
\&.\[rs]" fill\-column: 72
\&.\[rs]" mode: nroff
\&.\[rs]" End:
.EE
.RE
.
.IP \(bu
Certain file name extensions,
such as those commonly used by man pages,
trigger the automatic activation of the
.I nroff
mode.
.
.
.IP \(bu
Technically,
having the sequence
.
.
.RS
.IP
.EX
\&.\[rs]" \%\-*\- nroff \-*\-
.EE
.RE
.
.
.IP
in the first line of a file will cause Emacs to enter the
.I nroff
major mode when it is loaded into the buffer.
.
Unfortunately,
some implementations of the
.MR man 1
program are confused by this practice,
so we discourage it.
.
.
.\" ====================================================================
.SS "Editing with Vim"
.\" ====================================================================
.
.\" TODO: elvis, vile.  Nvi does not support highlighting at all, and
.\" gedit does but has no rules for roff yet.  Other editors TBD.
Other editors provide support for
.IR roff -style
files too,
such as
.MR vim 1 ,
an extension of the
.MR vi 1
program.
.
Vim's highlighting can be made to recognize
.I roff
files by setting the
.I filetype
option in a Vim
.IR modeline .
.
For this feature to work,
your copy of
.I vim
must be built with support for,
and configured to enable,
several features;
consult the editor's online help topics
\[lq]auto\-setting\[rq],
\[lq]filetype\[rq],
and \[lq]syntax\[rq].
.
Then put the following at the end of your
.I roff
files,
after any Emacs configuration:
.\" ...because Emacs pattern-matches against 3000 bytes from the end of
.\" the buffer [or until hitting a 0x0C (FF, form-feed control)] for
.\" "Local Variables:", but Vim only checks as many lines as its
.\" 'modelines' variable tells it to.  A common default is "5", but
.\" Emacs settings can be longer than that.
.
.
.RS
.IP
.EX
\&.\[rs]" vim: set filetype=groff textwidth=72:
.EE
.RE
.
.
.P
Replace \[lq]groff\[rq] in the above with \[lq]nroff\[rq] if you want
highlighing that does
.I not
recognize many of the GNU extensions to
.IR roff ,
such as request,
register,
and string names longer than two characters.
.
.
.\" ====================================================================
.SH Authors
.\" ====================================================================
.
This document was written by
.MT groff\-bernd\:.warken\-72@\:web\:.de
Bernd Warken
.ME ,
with the sections \[lq]Concepts\[rq],
\[lq]History\[rq],
and \[lq]Input Conventions\[rq]
mostly written by
.MT g.branden\:.robinson@\:gmail\:.com
G.\& Branden Robinson
.ME .
.
.
.\" ====================================================================
.SH "See also"
.\" ====================================================================
.
There is a lot of documentation about
.IR roff .
.
The original papers describing AT&T
.I troff
are still available,
and all aspects of
.I groff
are documented in great detail.
.
.
.\" ====================================================================
.SS "Internet sites"
.\" ====================================================================
.
.P
.UR https://\:github\:.com/\:larrykollar/\:Unix\-Text\-Processing
.I Unix Text Processing
.UE ,
by Dale Dougherty and Tim O'Reilly,
1987,
Hayden Books.
.
This well-regarded text from 1987 brings the reader from a state of no
knowledge of Unix or text editing
(if necessary)
to sophisticated computer-aided typesetting.
.
It has been placed under a free software license by its authors and
updated by a team of
.I groff
contributors and enthusiasts.
.
.
.P
.UR http://\:manpages\:.bsd\:.lv/\:history\:.html
\[lq]History of Unix Manpages\[rq]
.UE ,
an online article maintained by the mdocml project,
provides an overview of
.I roff
development from Salzer's
.I RUNOFF
to 2008,
with links to original documentation and recollections of the authors
and their contemporaries.
.
.
.P
.UR http://\:www\:.troff\:.org/
troff.org
.UE ,
Ralph Corderoy's
.I troff
site,
provides an overview and pointers to much historical
.I roff
information.
.
.
.P
.UR http://\:www\:.multicians\:.org/
Multicians
.UE ,
a site by Multics enthusiasts,
contains a lot of information on the MIT projects CTSS and Multics,
including
.IR RUNOFF ;
it is especially useful for its glossary and the many links to
historical documents.
.
.
.P
.UR http://\:www\:.tuhs\:.org/\:Archive/
The Unix Archive
.UE ,
curated by the Unix Heritage Society,
provides the source code and some binaries of historical Unices
(including the source code of some versions of
.I troff
and its documentation)
contributed by their copyright holders.
.
.
.P
.UR http://\:web\:.mit\:.edu/\:Saltzer/\:www/\:publications/\
\:pubs\:.html
Jerry Saltzer's home page
.UE
stores some documents using the original
.I RUNOFF
formatting language.
.
.
.P
.UR http://\:www\:.gnu\:.org/\:software/\:groff
.I groff
.UE ,
GNU
.IR roff 's
web site,
provides convenient access to
.IR groff 's
source code repository,
bug tracker,
and mailing lists
(including archives and the subscription interface).
.
.
.\" ====================================================================
.SS "Historical \f[I]roff\f[] documentation"
.\" ====================================================================
.
Many AT&T
.I troff
documents are available online,
and can be found at Ralph Corderoy's site
(see above)
or via Internet search.
.
.
.P
Of foremost significance are two mentioned in section \[lq]History\[rq]
above,
describing the language and its device-independent implementation,
respectively.
.
.
.P
\[lq]Troff User's Manual\[rq]
by Joseph F.\& Ossanna,
1976
(revised by Brian W.\& Kernighan,
1992),
AT&T Bell Laboratories Computing Science Technical Report No.\& 54.
.
.
.P
\[lq]A Typesetter-independent TROFF\[rq]
by Brian W.\& Kernighan,
1982,
AT&T Bell Laboratories Computing Science Technical Report No.\& 97.
.
.
.P
You can obtain many relevant Bell Labs papers in PDF from
.UR https://\:github\:.com/\:bwarken/\:roff_classical\:.git
Bernd Warken's
\[lq]roff classical\[rq]
GitHub repository
.UE .
.
.
.\" ====================================================================
.SS "Manual pages"
.\" ====================================================================
.
As a system of multiple components,
a
.I roff
system potentially has many man pages,
each describing an aspect of it.
.
Unfortunately,
there is no general naming scheme for the documentation among the
different
.I roff
implementations.
.
.
.P
For GNU
.IR roff ,
the
.MR groff @MAN1EXT@
man page offers a survey of all the documentation distributed with the
system.
.
.
.P
With other
.IR roff s,
you are on your own,
but
.MR troff 1 \" foreign troff
might be a good starting point.
.
.
.\" Restore compatibility mode (for, e.g., Solaris 10/11).
.cp \n[*groff_roff_7_man_C]
.do rr *groff_roff_7_man_C
.
.
.\" Local Variables:
.\" fill-column: 72
.\" mode: nroff
.\" End:
.\" vim: set filetype=groff textwidth=72:

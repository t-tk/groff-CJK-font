'\" t
.TH groff @MAN7EXT@ "@MDATE@" "groff @VERSION@"
.SH Name
groff \- GNU
.I roff
language reference
.
.
.\" ====================================================================
.\" Legal Terms
.\" ====================================================================
.\"
.\" Copyright (C) 2000-2018, 2020-2022 Free Software Foundation, Inc.
.\"
.\" This file is part of groff, the GNU roff type-setting system.
.\"
.\" Permission is granted to copy, distribute and/or modify this
.\" document under the terms of the GNU Free Documentation License,
.\" Version 1.3 or any later version published by the Free Software
.\" Foundation; with no Invariant Sections, with no Front-Cover Texts,
.\" and with no Back-Cover Texts.
.\"
.\" A copy of the Free Documentation License is included as a file
.\" called FDL in the main directory of the groff source package.
.
.
.\" Save and disable compatibility mode (for, e.g., Solaris 10/11).
.do nr *groff_groff_7_man_C \n[.cp]
.cp 0
.
.
.\" ====================================================================
.\" Setup
.\" ====================================================================
.
.\" Man pages should not define page-local macros.  Most of these were
.\" written long ago; someday we'll revise the page without them.
.
.\" ====================================================================
.\" start a macro, escape sequence, or register definition
.
.de TPx
.  TP 10n
..
.\" ====================================================================
.\" .Text anything ...
.\"
.\" All arguments are printed as text.
.\"
.de Text
.  nop \)\\$*
..
.
.\" ========= command=line option =========
.
.de option
.  Text \f[CB]\\$*
.  ft P
..
.
.\" ========= characters =========
.
.de squoted_char
.  Text \[oq]\f[CB]\\$1\f[]\[cq]\\$2
..
.de dquoted_char
.  Text \[lq]\f[CB]\\$1\f[]\[rq]\\$2
..
.\" ========= requests =========
.
.\" synopsis of a request
.de REQ
.  ie \\n[.$]=1 \{\
.    Text \f[CB]\\$1\f[]
.  \}
.  el \{\
.    Text \f[CB]\\$1\~\f[]\f[I]\\$2\f[]
.  \}
..
.
.\" reference of a request
.de request
.  ie (\\n[.$] < 2) \
.    B \\$*
.  el \
.    BR \\$*
..
.
.\" ========= numerical elements =========
.
.\" number with a trailing unit
.de scalednumber
.  Text \\$1\^\f[CB]\\$2\f[]\\$3\f[R]
.  ft P
..
.
.\" representation of units within the text
.de scaleindicator
.  Text \f[CB]\\$1\f[]\\$2\f[R]
.  ft P
..
.
.\" representation of mathematical operators within the text
.de operator
.  squoted_char \\$@
..
.
.
.\" ========= escape sequences =========
.
.\" ====================================================================
.\" .ESC name [arg]
.\"
.\" Synopsis of an escape sequence, optionally with argument
.\" Args   : 1 or 2; 'name' obligatory, 'arg' optional
.\"   name : suitable name for an escape sequence (c, (xy, [long])
.\"   arg  : arbitrary word
.\" Result : prints \namearg, where 'name' is in CB, 'arg' in I
.\"
.de ESC
.  Text "\f[CB]\e\\$1\,\f[I]\\$2\/\fR"
..
.\" ====================================================================
.\" .ESC[] name arg
.\"
.\" Synopsis for escape sequence with a bracketed long argument
.\" Args   : 2 obligatory
.\"   name : suitable name for an escape sequence (c, (xy, [long])
.\"   arg  : arbitrary text
.\" Result : prints \name[arg], where 'name' is in CB, 'arg' in I
.\"
.de ESC[]
.  Text "\f[CB]\e\\$1\[lB]\f[]\,\f[I]\\$2\/\f[]\f[CB]\[rB]\f[]"
..
.\" ====================================================================
.\" .ESCq name arg
.\"
.\" Synopsis for escape sequence with a bracketed long argument
.\" Args   : 2 obligatory
.\"   name : suitable name for an escape sequence (c, (xy, [long])
.\"   arg  : arbitrary text
.\" Result : prints \name'arg', where 'name' is in CB, 'arg' in I
.\"
.de ESCq
.  Text "\f[CB]\e\\$1\[aq]\f[]\,\f[I]\\$2\/\f[]\f[CB]\[aq]\f[]"
..
.\" ====================================================================
.\" .ESC? arg
.\"
.\" Synopsis for escape sequence with a bracketed long argument
.\" Args   : 1 obligatory
.\"   arg  : arbitrary text
.\" Result : prints '\?arg\?', where the '\?' are in CB, 'arg' in I
.\"
.de ESC?
.  Text "\f[CB]\e?\,\f[I]\\$1\/\f[CB]\[rs]?\f[R]"
..
.\" ====================================================================
.\" .esc name [punct]
.\"
.\" Reference of an escape sequence (no args), possibly punctuation
.\" Args    : 1 obligatory
.\"   name  : suitable name for an escape sequence (c, (xy, [long])
.\"   punct : arbitrary
.\" Result  : prints \name, where 'name' is in B, 'punct' in R
.\"
.de esc
.  ie (\\n[.$] < 2) \
.    B "\e\\$1"
.  el \
.    BR "\e\\$1" \\$2
..
.\" ====================================================================
.\" .escarg name arg [punct]
.\"
.\" Reference of an escape sequence (no args)
.\" Args    : 1 obligatory, 1 optional
.\"   name  : suitable name for an escape sequence (c, (xy, [long])
.\"   arg   : arbitrary word
.\" Result  : prints \namearg, where
.\"           'name' is in B, 'arg' in I
.\"
.de escarg
.  Text \f[B]\e\\$1\f[]\,\f[I]\\$2\/\f[]\\$3
..
.\" ====================================================================
.\" .esc[] name arg [punct]
.\"
.\" Reference for escape sequence with a bracketed long argument
.\" Args   : 2 obligatory
.\"   name : suitable name for an escape sequence (c, (xy, [long])
.\"   arg  : arbitrary text
.\" Result : prints \name[arg], where 'name' is in CB, 'arg' in CI
.\"
.de esc[]
.  Text \f[CB]\e\\$1\[lB]\f[]\,\f[CI]\\$2\/\f[]\f[CB]\[rB]\f[]\\$3
..
.
.\" ========= strings =========
.
.\" synopsis for string, with \*[]
.de STRING
.  Text \[rs]*[\f[CB]\\$1\f[]] \\$2
..
.\" synopsis for a long string
.de string
.  if \n[.$]=0 \
.    return
.  Text \f[CB]\[rs]*\[lB]\\$1\[rB]\f[]\\$2
..
.
.\" ========= registers =========
.
.\" synopsis for registers, with \n[]
.de REG
.  Text \[rs]n[\f[CB]\\$1\f[]]
..
.\" reference of a register, without decoration
.de register
.  Text register
.  ie (\\n[.$] < 2) \
.    B \\$*
.  el \
.    BR \\$*
..
.
.\" begin list [piloting a possible extension to man(7)]
.de LS
.  nr saved-PD \\n[PD]
.  nr PD 0
..
.
.\" end list [piloting a possible extension to man(7)]
.de LE
.  nr PD \\n[saved-PD]
..
.
.
.\" end of macro definitions
.
.
.\" ====================================================================
.SH Description
.\" ====================================================================
.
.I groff
is short for GNU
.IR roff ,
a free reimplementation of the AT&T device-independent
.I troff \" AT&T
typesetting system.
.
See
.MR roff @MAN7EXT@
for a survey of and background on
.I roff
systems.
.
.
.P
This document is intended as a reference.
.
The primary
.I groff
manual,
.IR "Groff: The GNU Implementation of troff" ,
by Trent A.\& Fisher and Werner Lemberg,
is a better resource for learners,
containing many examples and much discussion.
.
It is written in Texinfo;
you can browse it interactively with \[lq]info groff\[rq].
.
Additional formats,
including plain text,
HTML,
DVI,
and PDF,
may be available in
.IR @DOCDIR@ .
.
.
.P
.I groff
is also a name for an extended dialect of the
.I roff
language.
.
We use \[lq]roff\[rq] to denote features that are universal,
or nearly so,
among implementations of this family.
.
We apply the term \[lq]groff\[rq] to the language documented here,
the GNU implementation of the overall system,
the project that develops that system,
and the command of that name.
.
.
.P
GNU
.IR troff , \" GNU
installed on this system as
.MR @g@troff @MAN1EXT@ ,
is the
.I formatter:
a program that reads device and font descriptions
(\c
.MR groff_font @MAN5EXT@ ),
interprets the
.I groff
language expressed in text input files,
and translates that input into a device-independent output format
(\c
.MR groff_out @MAN5EXT@ )
that is usually then post-processed by an output driver to produce
PostScript,
PDF,
HTML,
DVI,
or terminal output.
.
.
.\" ====================================================================
.SH "Input format"
.\" ====================================================================
.
Input to
.I @g@troff
must be in one of two character encodings it can recognize:
IBM code page 1047 on EBCDIC systems,
and ISO\~Latin-1 (8859-1) otherwise.
.
Use of ISO\~646-1991:IRV (\[lq]US-ASCII\[rq]) or (equivalently) the
\[lq]Basic Latin\[rq]
subset of ISO\~10646 (\[lq]Unicode\[rq]) is recommended;
see
.MR groff_char @MAN7EXT@ .
.
.MR groff @MAN1EXT@
and the
.MR preconv @MAN1EXT@
preprocessor can transform other encodings,
including UTF-8,
to satisfy
.IR @g@troff 's
requirements.
.
.
.P
.I groff
input is organized into lines separated by the Unix newline character
(U+000A).
.
.
.\" ====================================================================
.SH "Syntax characters"
.\" ====================================================================
.
Several input characters are syntactically significant to
.IR groff .
.
.
.IP . 4n
A dot at the beginning of an input line marks it as a
.I control line.
.
It can also follow the
.request .el
and
.request .nop
requests,
and the condition in
.request .if ,
.request .ie ,
and
.request .while
requests.
.
The control character invokes requests and calls macros by the name that
follows it.
.
The
.request .cc
request can change the control character.
.
.
.IP \[aq]
The neutral apostrophe is recognized where the control character is;
it is the
.I no-break control character.
.
It works as the control character does,
but suppresses the break implied by the
.request .bp ,
.request .cf ,
.request .fi ,
.request .fl ,
.request .in ,
.request .nf ,
.request .rj ,
.request .sp ,
.request .ti ,
.request .trf ,
requests.
.
If the no-break control character is used with any of these requests,
.I @g@troff
suppresses the break;
instead the requested operation takes effect at the next break.
.
It makes
.request .br
nilpotent.
.
The no-break control character can be changed with the
.request .c2
request.
.
When formatted,
.RB \[lq] \[aq] \[rq]
may be typeset as a typographical quotation mark;
use the
.esc [aq]
special character escape sequence to format a neutral apostrophe glyph.
.
.
.IP \[dq]
The neutral double quote can be used to enclose arguments to macros and
strings,
and is required if those arguments contain space or tab characters.
.
In the
.request .ds ,
.request .ds1 ,
.request .as ,
and
.request .as1
requests,
a leading double quote in the second argument is stripped off,
enabling the inclusion of leading space characters in the string
definition or appendment.
.
To include a double quote inside a quoted argument,
use the
.esc [dq]
special character escape sequence
(which also serves to typeset the glyph in text).
.
.
.IP \[rs]
A backslash introduces an escape sequence.
.
The escape character can be changed with the
.request .ec
request;
.request .eo
disables escape sequence recognition.
.
Use the
.esc [rs]
special character escape sequence to format a backslash glyph,
and
.esc e
to typeset the glyph of the current escape character.
.
.
.IP (
An opening parenthesis is special only in certain escape sequences;
when recognized,
it introduces an argument of exactly two characters.
.
.I groff
offers the more flexible square bracket syntax.
.
.
.IP [
An opening bracket is special only in certain escape sequences;
when recognized,
it introduces an argument (list) of any length,
not including a closing bracket.
.
.
.IP ]
A closing bracket is special only when an escape sequence using an
opening bracket as an argument delimiter is being interpreted.
.
It ends the argument (list).
.
.
.P
Additionally,
the Control+A character (U+0001) in text is interpreted as a
.I leader
(see below).
.
.
.P
Horizontal white space characters are significant to
.I groff,
but trailing spaces on text lines are ignored.
.\" slack text for widow/orphan control: trailing tabs are not
.
.
.TP 8n
.I space
Space characters separate arguments in request invocations,
macro calls,
and string interpolations.
.
In text,
they separate words.
.
Multiple adjacent space characters in text cause
.I groff
to attempt end-of-sentence detection on the preceding word
(and trailing punctuation).
.
The amount of space between words and sentences is controlled by the
.request .ss
request.
.
When filling is enabled
(the default),
a line may be broken at a space.
.
When adjustment is enabled and set to both margins
(the default),
inter-word spaces may be expanded to justify the line.
.
An adjustable but non-breaking space is available with
.esc \[ti] .
.
To get a space of fixed width,
use one of the escape sequences
.squoted_char "\[rs]\~"
(the escape character followed by a space),
.esc 0 ,
.esc | ,
.esc \[ha] ,
or
.esc h ;
see section \[lq]Escape sequences\[rq] below.
.
.
.TP
.I newline
In text,
a newline puts an inter-word space onto the output and,
if filling is enabled,
triggers end-of-sentence recognition on the preceding text.
.
See section \[lq]Line continuation\[rq] below.
.
.
.TP
.I tab
A tab character in text causes the drawing position to advance to the
next defined tab stop.
.
.
.\" ====================================================================
.SH "Tabs and leaders"
.\" ====================================================================
.
.\" BEGIN Keep (roughly) parallel with groff.texi node "Tabs and
.\" Leaders".
The formatter interprets input horizontal tab characters
(\[lq]tabs\[rq]) and Control+A characters (\[lq]leaders\[rq]) into
movements to the next tab stop.
.
Tabs simply move to the next tab stop;
leaders place enough periods to fill the space.
.
Tab stops are by default located every half inch measured from the
drawing position corresponding to the beginning of the input line;
see section \[lq]Page geometry\[rq] of
.MR roff 7 .
.
Tabs and leaders do not cause breaks and therefore do not interrupt
filling.
.
Tab stops can be configured with the
.B ta
request,
and tab and leader glyphs with the
.B tc
and
.B lc
requests,
respectively.
.\" END Keep (roughly) parallel with groff.texi node "Tabs and Leaders".
.
.
.\" ====================================================================
.SH "Line continuation"
.\" ====================================================================
.
The
.I roff
language distinguishes input and output line continuation.
.
.
.P
A backslash
.B \[rs]
immediately followed by a newline,
sometimes discussed as
.BI \[rs] newline\c
,
suppresses the effects of that newline
on the input.
.
The next input line thus retains the classification of its predecessor
as a control or text line.
.
.BI \[rs] newline
is useful for managing line lengths in the input during document
maintenance;
you can break an input line in the middle of a request invocation,
macro call,
or escape sequence.
.
Input line continuation is invisible to the formatter,
with two exceptions:
the
.B \[or]
operator recognizes the new input line,
and the input line counter register
.B .c
is incremented.
.
.
.P
The
.esc c
escape sequence continues an
.I output
line.
.
Nothing on the input line after it is formatted.
.
In contrast to
.BI \[rs] newline\c
,
a line after
.esc c
is treated as a new input line,
so a control character is recognized at its beginning.
.
The visual results depend on whether filling is enabled.
.
An intervening control line that causes a break overrides
.esc c ,
flushing out the pending output line in the usual way.
.
The
.register .int
contains a positive value if the last output line was continued with
.esc c ;
this datum is associated with the
environment.
.
.
.\" ====================================================================
.SH Colors
.\" ====================================================================
.
.\" BEGIN Keep (roughly) parallel with groff.texi node "Colors".
.I groff
supports color output with a variety of color spaces and up to 16 bits
per channel.
.
Some devices,
particularly terminals,
may be more limited.
.
When color support is enabled,
two colors are current at any given time:
the
.I stroke color,
with which glyphs,
rules (lines),
and geometric objects like circles and polygons are drawn,
and the
.I fill color,
which can be used to paint the interior of a closed geometric figure.
.
The
.BR color ,
.BR defcolor ,
.BR gcolor ,
and
.B fcolor
requests;
.B \[rs]m
and
.B \[rs]M
escape sequences;
and
.BR .color ,
.BR .m ,
and
.B .M
registers exercise color support.
.
.
.P
Each output device has a color named
.RB \[lq] default \[rq],
which cannot be redefined.
.
A device's default stroke and fill colors are not necessarily the same.
.
For the
.BR dvi ,
.BR html ,
.BR pdf ,
.BR ps ,
and
.B xhtml
output devices,
.I @g@troff
automatically loads a macro file defining many color names at startup.
.
By the same mechanism,
the devices supported by
.MR grotty @MAN1EXT@
recognize the eight standard ISO\~6429/ECMA-48 color names
(also known vulgarly as \[lq]ANSI colors\[rq]).
.\" END Keep (roughly) parallel with groff.texi node "Colors".
.
.
.br
.ne 3v
.\" ====================================================================
.SH Measurements
.\" ====================================================================
.
Numeric values are expressed as integers or decimal fractions optionally
followed by a
.I scaling unit,
a letter abbreviating a unit of measurement.
.
They are stored as integers in device-specific
.I basic units.
.
.
.P
.LS
.RS
.
.TPx
.B c
centimeter
.
.TPx
.B i
inch
.
.TPx
.B P
pica
(1/6 inch)
.
.TPx
.B p
point
(1/72 inch)
.
.TPx
.B m
em
(size of current font in points;
approximate width of \[lq]M\[rq] glyph)
.
.TPx
.B M
1/100 em
.
.TPx
.B n
en
(1/2 em)
.
.TPx
.B u
basic unit;
device-specific
.
.TPx
.B v
vee
(distance between adjacent text baselines)
.
.TPx
.B s
scaled point;
device-specific
.
.TPx
.B f
multiply by 65,536;
used to scale color channel values
.RE
.LE
.
.
.P
See
.MR groff_font @MAN5EXT@
for information on device-specific measurements.
.
.
.\" ====================================================================
.SH "Numeric expressions"
.\" ====================================================================
.
.\" BEGIN Keep (roughly) parallel with groff.texi node "Numeric
.\" expressions".
A
.I numeric expression
evaluates to an integer:
it can be as simple as a literal
.RB \[lq] 0 \[rq]
or it can be a complex sequence of register and string interpolations
interleaved with measurements operators.
.
.
.P
.TS
Rf(CR) L.
+	addition
\-	subtraction
*	multiplication
/	truncating division
%	modulo
_
\f[R]unary\f[] +	assertion, motion, incrementation
\f[R]unary\f[] \-	negation, motion, decrementation
_
;	scaling
>?	maximum
<?	minimum
_
<	less than
>	greater than
<=	less than or equal
>=	greater than or equal
\&=	equal
==	equal
_
&	logical conjunction (\[lq]and\[rq])
:	logical disjunction (\[lq]or\[rq])
!	logical complementation (\[lq]not\[rq])
_
( )	precedence
_
|	boundary-relative motion
.TE
.
.
.P
.I @g@troff
provides a set of mathematical and logical operators familiar to
programmers\[em]as well as some unusual ones\[em]but supports only
integer arithmetic.
.
(Provision is made for intepreting and
reporting decimal fractions in certain cases.)
.
The internal data type used for computing results is usually a 32-bit
signed integer,
which suffices to represent magnitudes within a range of \[+-]2
billion.
.
(If that's not enough, see
.MR groff_tmac @MAN5EXT@
for the
.I 62bit.tmac
macro package.)
.
.
.P
Arithmetic infix operators perform a function on the numeric expressions
to their left and right;
they are
.B +
(addition),
.B \-
(subtraction),
.B *
(multiplication),
.B /
(truncating division),
and
.B %
(modulo).
.
.I Truncating division
rounds to the integer nearer to zero,
no matter how large the fractional portion.
.
Overflow and division
(or modulo)
by zero are errors and abort evaluation of a numeric expression.
.
.
.P
Arithmetic unary operators operate on the numeric expression to their
right;
they are
.B \-
(negation)
and
.B +
(assertion\[em]for completeness;
it does nothing).
.
The unary minus must often be used with parentheses to avoid confusion
with the decrementation operator,
discussed below.
.
.
.P
The sign of the modulo of operands of mixed signs is determined by the
sign of the first.
.
Division and modulo operators satisfy the following property:
given a
.RI dividend\~ a
and a
.RI divisor\~ b ,
a
.RI quotient\~ q
formed by
.RB \[lq] "(a / b)" \[rq]
and a
.RI remainder\~ r
by
.RB \[lq] "(a % b)" \[rq],
then
.IR qb \~+\~ r \~=\~ a .
.
.
.P
GNU
.IR troff 's \" GNU
scaling operator,
used with parentheses as
.BI ( c ; e )\c
,
evaluates a numeric
.RI expression\~ e
.RI using\~ c
as the default scaling unit.
.
If
.I c
is omitted,
scaling units are ignored in the evaluation
.RI of\~ e .
.
GNU
.I troff \" GNU
also provides a pair of operators to compute the extrema of two
operands:
.B >?\&
(maximum)
and
.B <?\&
(minimum).
.
.
.P
Comparison operators comprise
.B <
(less than),
.B >
(greater than),
.B <=
(less than or equal),
.B >=
(greater than or equal),
and
.B =
(equal).
.
.B ==
is a synonym for
.BR = .
.
When evaluated,
a comparison is replaced with
.RB \[lq] 0 \[rq]
if it is false and
.RB \[lq] 1 \[rq]
if true.
.
In the
.I roff
language,
positive values are true,
others false.
.
.
.P
We can operate on truth values with the logical operators
.B &
(logical conjunction or \[lq]and\[rq])
and
.B :
(logical disjunction or \[lq]or\[rq]).
.
They evaluate as comparison operators do.
.
A logical complementation (\[lq]not\[rq]) operator,
.B !\&,
works only within
.RB \[lq] if \[rq],
.RB \[lq] ie \[rq],
and
.RB \[lq] while \[rq]
requests.
.
.\" This is worded to avoid implying that the operator doesn't apply to
.\" conditional expressions in general, albeit without mentioning them
.\" because they're out of scope.
Furthermore,
.B !\&
is recognized only at the beginning of a numeric expression not
contained by another numeric expression.
.
In other words,
it must be the \[lq]outermost\[rq] operator.
.
Including it elsewhere in the expression produces a warning in the
\[lq]number\[rq] category
(see
.MR @g@troff @MAN1EXT@ ),
and its expression evaluates false.
.
This unfortunate limitation maintains compatibility with AT&T
.IR troff .\" AT&T
.
You can test a numeric expression for falsity by comparing it to a false
value.
.
.
.P
The
.I roff
language has no operator precedence:
expressions are evaluated strictly from left to right,
in contrast to schoolhouse arithmetic.
.
Use parentheses
.B ( )
to impose a desired precedence upon subexpressions.
.
.
.P
For many requests and escape sequences that cause motion on the page,
the unary operators
.B +
and
.B \-
work differently when leading a numeric expression.
.
They then indicate a motion relative to the drawing position:
positive is down in vertical contexts,
right in horizontal ones.
.
.
.P
.B +
and
.B \-
are also treated differently by the following requests and escape
sequences:
.BR bp ,
.BR in ,
.BR ll ,
.BR pl ,
.BR pn ,
.BR po ,
.BR ps ,
.BR pvs ,
.BR rt ,
.BR ti ,
.BR \[rs]H ,
.BR \[rs]R ,
and
.BR \[rs]s .
.
Here,
leading plus and minus signs serve as incrementation and decrementation
operators,
respectively.
.
To negate an expression,
subtract it from zero
or include the unary minus in parentheses with its argument.
.\" @xref{Setting Registers}, for examples.
.
.
.P
A leading
.B \[or]
operator indicates a motion relative not to the drawing position but to
a boundary.
.
For horizontal motions,
the measurement specifies a distance relative to a drawing position
corresponding to the beginning of the
.I input
line.
.
By default,
tab stops reckon movements in this way.
Most escape sequences do not;
.\" XXX: Which ones do?
.B \[or]
tells them to do so.
.
For vertical movements,
the
.B \[or]
operator specifies a distance from the first text baseline on the page
or in the current diversion,
using the current vertical spacing.
.
.
.P
The
.B \[rs]B
escape sequence tests its argument for validity as a numeric expression.
.
.
.P
A register interpolated as an operand in a numeric expression must have
an Arabic format;
luckily,
this is the default.\" @xref{Assigning Register Formats}.
.
.
.P
Due to the way arguments are parsed,
spaces are not allowed in numeric expressions unless the (sub)expression
containing them is surrounded by parentheses.
.\"@xref{Request and Macro Arguments}, and @ref{Conditionals and Loops}.
.\" END Keep (roughly) parallel with groff.texi node "Numeric
.\" expressions".
.
.
.\" ====================================================================
.SH "Control structures"
.\" ====================================================================
.
.I groff
has \[lq]if\[rq] and \[lq]while\[rq] control structures like other
languages.
.
However,
the syntax for grouping multiple input lines in the branches or bodies
of these structures is unusual.
.
.
.P
They have a common form:
the request name is
(except for
.request .el
\[lq]else\[rq])
followed by a conditional expression
.IR cond-expr ;
the remainder of the line,
.IR anything ,
is interpreted as if it were an input line.
.
Any quantity of spaces between arguments to requests serves only to
separate them;
leading spaces in
.I anything
are therefore not seen.
.
.I anything
effectively
.I cannot
be omitted;
if
.I cond-expr
is true and
.I anything
is empty,
the newline at the end of the control line is interpreted as a blank
line
(and therefore a blank text line).
.
.
.P
It is frequently desirable for a control structure to govern more than
one request,
macro call,
or text line,
or a combination of the foregoing.
.
The opening and closing brace escape sequences
.esc {
and
.esc }
perform such grouping.
.
Brace escape sequences outside of control structures have no meaning and
produce no output.
.
.
.P
.esc {
should appear
(after optional spaces and tabs)
immediately subsequent to the request's conditional expression.
.
.esc }
should appear on a line with other occurrences of itself as necessary to
match
.esc {
sequences.
.
It can be preceded by a control character,
spaces,
and tabs.
.
Input after any quantity of
.esc }
sequences on the same line is processed only if all the preceding
conditions to which they correspond are true.
.
Furthermore,
a
.esc }
closing the body of a
.request .while
request must be the last such escape sequence on an input line.
.
.
.\" ====================================================================
.SS "Conditional expressions"
.\" ====================================================================
.
.\" BEGIN Keep (roughly) parallel with groff.texi node "Operators in
.\" Conditionals".
The
.request .if ,
.request .ie ,
and
.request .while
requests test the truth values of numeric expressions.
.
They also support several additional Boolean operators;
the members of this expanded class are termed
.IR "conditional expressions" ;
their truth values are as shown below.
.
.
.br
.ne 14v
.P
.TS
rf(BI) lB
rB lx.
cond-expr\f[R].\|.\|.	.\|.\|.is true if.\|.\|.
_
T{
.BI \[aq] s1 \[aq] s2 \[aq]
T}	T{
.I s1
produces the same formatted output as
.IR s2 .
T}
T{
.BI c\~ g
T}	T{
a glyph
.I g
is available.
T}
T{
.BI d\~ m
T}	T{
a string,
macro,
diversion,
or request
.I m
is defined.
T}
e	T{
the current page number is even.
T}
T{
.BI F\~ f
T}	T{
a font named
.I f
is available.
T}
T{
.BI m\~ c
T}	T{
a color named
.I c
is defined.
T}
n	T{
the formatter is in
.I nroff
mode.
T}
o	T{
the current page number is odd.
T}
T{
.BI r\~ n
T}	T{
a register named
.I n
is defined.
T}
T{
.BI S\~ s
T}	T{
a font style named
.I s
is available.
T}
t	T{
the formatter is in
.I troff
mode.
T}
v	T{
n/a
(historical artifact;
always false).
T}
.TE
.
.
.P
The first of the above,
the
.I "output comparison operator,"
interpolates a true value if formatting its comparands
.I s1
and
.I s2
produces the same output commands.
.
Other delimiters can be used in place of the neutral apostrophes.
.
.I @g@troff
formats
.I s1
and
.I s2
in separate environments;
after the comparison,
the resulting data are discarded.
.
The resulting glyph properties,
including font family,
style,
size,
and
slant,
must match,
but not necessarily the requests and/or escape sequences used to obtain
them.
.
Motions must match in orientation and magnitude to within the applicable
horizontal or vertical motion quantum of the device,
after rounding.
.
.\" TODO: Uncomment and add forward reference when we add a "GNU troff
.\" internals" subsection to this page.
.\"(All of this is to say that the lists of output nodes created by
.\"formatting
.\".I s1
.\"and
.\".I s2
.\"must be identical.)
.
.
.P
Surround the comparands with
.B \[rs]?\&
to avoid formatting them;
this causes them to be compared character by character,
as with string comparisons in other programming languages.
.
Since comparands protected with
.B \[rs]?\&
are read in copy mode,
they need not even be valid
.I groff
syntax.
.
The escape character is still lexically recognized,
however,
and consumes the next character.
.
.
.P
The above operators can't be combined with most others,
but a leading
.RB \[lq] !\& \[rq],
not followed immediately by spaces or tabs,
complements an expression.
.
Spaces and tabs are optional immediately after the
.RB \[lq] c \[rq],
.RB \[lq] d \[rq],
.RB \[lq] F \[rq],
.RB \[lq] m \[rq],
.RB \[lq] r \[rq],
and
.RB \[lq] S \[rq]
operators,
but right after
.RB \[lq] !\& \[rq],
they end the predicate and the conditional evaluates true.
.
(This bizarre behavior maintains compatibility with AT&T
.IR troff .)
.\" END Keep (roughly) parallel with groff.texi node "Operators in
.\" Conditionals".
.
.
.\" ====================================================================
.SH "Syntax reference conventions"
.\" ====================================================================
.
In the following request and escape sequence specifications,
most argument names were chosen to be descriptive.
.
A few denotations may require introduction.
.
.
.P
.LS
.RS
.
.TPx
.I c
denotes a single input character.
.
.TPx
.I font
a font either specified as a font name or a numeric mounting position.
.
.TPx
.I anything
all characters up to the end of the line,
to the ending delimiter for the escape sequence,
or within
.esc {
and
.esc } .
.
Escape sequences may generally be used freely in
.IR anything ,
except when it is read in copy mode.
.
.TPx
.I n
is a numerical expression that evaluates to an integer value.
.
.TPx
.I N
is an optionally-signed numerical expression.
.
.TPx
.I \[+-]N
has three meanings,
depending on its sign.
.
.RE
.LE
.
.
.P
If a numerical expression presented as
.I \[+-]N
starts with a
.squoted_char +
sign,
an increment in the amount of
.RI of\~ N
is applied to the value applicable to the request or escape sequence.
.
If it starts with a
.squoted_char \-
sign,
a decrement of magnitude
.I N
is applied instead.
.
Without a sign,
.I N
replaces any existing value.
.
A leading minus sign
.RI in\~ N
is always interpreted as a decrementation operator,
not an algebraic sign.
.
To assign a register a negative value or the negated value of another
register,
enclose it with its operand in
parentheses or subtract it from zero.
.
If a prior value does not exist
(the register was undefined),
an increment or decrement is applied as if to\~0.
.
.
.\" ====================================================================
.SH Requests
.\" ====================================================================
.
In
.IR groff ,
identifier names,
including those of requests,
can be arbitrarily long.
.
No bracketing or marking of long names is needed in request invocation
syntax.
.
.
.P
Most requests take one or more arguments.
.
Tabs are permitted after a request name,
before its first argument
(if any),
but arguments themselves must be separated only by space characters.
.
There is no inherent limit on argument length or quantity.
.
.
.P
Not all details of request behavior are outlined here.
.
Refer to the
.I groff
Texinfo manual or
.MR groff_diff @MAN7EXT@ .
.
.
.\" ====================================================================
.SS "Request short reference"
.\" ====================================================================
.
.LS
.
.TPx
.REQ .ab "\f[R][\f[]message\f[R]]"
Abort processing;
write any
.I message
to the standard error stream and exit with failure status.
.
.
.TPx
.REQ .ad
Enable output line adjustment using mode stored in
.BR \[rs]n[.j] .
.
.
.TPx
.REQ .ad c
Enable output line adjustment in mode
.I c
.RI ( c =\c
.BR b , c , l , n , r ).
.
Sets
.BR \[rs]n[.j] .
.
.
.TPx
.REQ .af "register c"
Assign format
.I c
to
.IR register ,
where
.I c
is
.RB \[lq] i \[rq],
.RB \[lq] I \[rq],
.RB \[lq] a \[rq],
.RB \[lq] A \[rq],
or a sequence of decimal digits whose quantity denotes the minimum width
in digits to be used when the register is interpolated.
.
.RB \[lq] i \[rq]
and
.RB \[lq] a \[rq]
indicate Roman numerals and basic Latin alphabetics,
respectively,
in the lettercase specified.
.
The default is \[lq]0\[rq].
.
.
.TPx
.REQ .aln "new old"
Create alias
(additional name)
.I new
for existing register named
.IR old .
.
.TPx
.REQ .als "new old"
Create alias
(additional name)
.I new
for existing request,
string,
macro,
or diversion
.IR old .
.
.TPx
.REQ .am "macro"
Append to
.I macro
until
.B ..\&
is encountered.
.
.TPx
.REQ .am "macro end"
Append to
.I macro
until
.BI . end
is called.
.
.TPx
.REQ .am1 "macro"
Same as
.request .am
but with compatibility mode switched off during macro expansion.
.
.TPx
.REQ .am1 "macro end"
Same as
.request .am
but with compatibility mode switched off during macro expansion.
.
.TPx
.REQ .ami "macro"
Append to a macro whose name is contained in the string
.I macro
until
.B ..\&
is encountered.
.
.TPx
.REQ .ami "macro end"
Append to a macro indirectly.
.I macro
and
.I end
are strings whose contents are interpolated for the macro name and the
end macro,
respectively.
.
.TPx
.REQ .ami1 "macro"
Same as
.request .ami
but with compatibility mode switched off during macro expansion.
.
.TPx
.REQ .ami1 "macro end"
Same as
.request .ami
but with compatibility mode switched off during macro expansion.
.
.TPx
.REQ .as "name \fR[\fPstring\fR]\fP"
Append
.I string
to the string
.IR name ;
no operation if
.I string
is omitted.
.
.
.TPx
.REQ .as1 "name \fR[\fPstring\fR]\fP"
Same as
.request .as
but with compatibility mode switched off during string expansion.
.
.
.TPx
.REQ .asciify "diversion"
Unformat ASCII characters, spaces, and some escape sequences in
.IR diversion .
.
.TPx
.REQ .backtrace
Write a backtrace of the input stack to the standard error stream.
.
Also see the
.B \-b
option of
.MR groff @MAN1EXT@ .
.
.TPx
.REQ .bd "font N"
Embolden
.I font
by
.IR N \-1
units.
.
.TPx
.REQ .bd "S font N"
Embolden Special Font
.I S
when current font is
.IR font .
.
.
.TPx
.REQ .blm
Unset blank line macro (trap).
.
Restore default handling of blank lines.
.
.
.TPx
.REQ .blm name
Set blank line macro (trap) to
.IR name .
.
.
.TPx
.REQ .box
Stop directing output to current diversion;
any pending output line is discarded.
.
.
.TPx
.REQ .box name
Direct output to diversion
.IR name ,
omitting a partially collected line.
.
.
.TPx
.REQ .boxa
Stop appending output to current diversion;
any pending output line is discarded.
.
.
.TPx
.REQ .boxa name
Append output to diversion
.IR name ,
omitting a partially collected line.
.
.
.TPx
.REQ .bp
Eject current page and begin new page.
.
.TPx
.REQ .bp "\[+-]N"
Eject current page; next page number
.IR \[+-]N .
.
.TPx
.REQ .br
Line break.
.
.TPx
.REQ .brp
Break output line; adjust if applicable.
.
.TPx
.REQ .break
Break out of a while loop.
.
.TPx
.REQ .c2
Reset no-break control character to
.dquoted_char \[aq] .
.
.TPx
.REQ .c2 "c"
Set no-break control character to
.IR c .
.
.TPx
.REQ .cc
Reset control character to
.squoted_char . .
.
.TPx
.REQ .cc "c"
Set control character to
.IR c .
.
.TPx
.REQ .ce
Center the next input line.
.
.TPx
.REQ .ce "N"
Center following
.I N
input lines.
.
.TPx
.REQ .cf "filename"
Copy contents of file
.I filename
unprocessed to stdout or to the diversion.
.
.TPx
.REQ .cflags "n c1 c2 \fR\&.\|.\|.\&\fP"
Assign properties encoded by the number
.I n
to characters
.IR c1 ,
.IR c2 ,
and so on.
.
.
.TPx
.REQ .ch "name \fR[\fPN\fR]"
Change a planted page location trap
.I name
by moving its location to
.IR N ,
or by unplanting it altogether if
.I N
is absent.
.
.
.TPx
.REQ .char "c anything"
Define entity
.I c
as string
.IR anything .
.
.TPx
.REQ .chop object
Remove the last character from the macro,
string,
or diversion
named
.IR object .
.
.TPx
.REQ .class "name c1 c2 \fR\&.\|.\|.\&\fP"
Define a (character) class
.I name
comprising the characters or range expressions
.IR c1 ,
.IR c2 ,
and so on.
.
.TPx
.REQ .close "stream"
Close the
.IR stream .
.
.
.TPx
.REQ .color
Enable output of color-related device-independent output commands.
.
.
.TPx
.REQ .color "N"
If
.I N
is zero,
disable output of color-related device-independent output commands;
otherwise,
enable them.
.
.
.TPx
.REQ .composite "from to"
Map glyph name
.I from
to glyph name
.I to
while constructing a composite glyph name.
.
.TPx
.REQ .continue
Finish the current iteration of a while loop.
.
.TPx
.REQ .cp
Enable compatibility mode.
.
.TPx
.REQ .cp "N"
If
.I N
is zero disable compatibility mode, otherwise enable it.
.
.TPx
.REQ .cs "font N M"
Set constant character width mode for
.I font
to
.IR N /36
ems with em
.IR M .
.
.TPx
.REQ .cu "N"
Continuous underline in nroff, like
.request .ul
in troff.
.
.
.TPx
.REQ .da
Stop appending output to current diversion.
.
.
.TPx
.REQ .da name
Append output to diversion
.IR name .
.
.
.TPx
.REQ .de macro
Define or redefine
.I macro
until
.RB \[lq] ..\& \[rq]
occurs at the start of a control line in the current conditional block.
.
.
.TPx
.REQ .de "macro end"
Define or redefine
.I macro
until
.BI . end
is called at the start of a control line in the current conditional
block.
.
.
.TPx
.REQ .de1 "macro"
As
.request .de ,
but disable compatibility mode during macro expansion.
.
.TPx
.REQ .de1 "macro end"
As
.request ".de\~\f[I]macro\~end\f[]" ,
but disable compatibility mode during macro expansion.
.
.
.TPx
.REQ .defcolor "ident scheme color-component \f[R].\|.\|."
Define a color named
.I ident.
.
.I scheme
identifies a color space and determines the number of required
.IR color-component s;
it must be one of
.RB \[lq] rgb \[rq]
(three components),
.RB \[lq] cmy \[rq]
(three),
.RB \[lq] cmyk \[rq]
(four),
or
.RB \[lq] gray \[rq]
(one).
.
.RB \[lq] grey \[rq]
is accepted as a synonym of
.RB \[lq] gray \[rq].
.
The color components can be encoded as a single hexadecimal value
starting with
.B #
or
.BR ## .
.
The former indicates that each component is in the range 0\[en]255
(0\[en]FF),
the latter the range 0\[en]65,535 (0\[en]FFFF).
.
Alternatively,
each color component can be specified as a decimal fraction in the range
0\[en]1,
interpreted using a default scaling unit
.RB of\~\[lq] f \[rq],
which multiplies its value by 65,536
(but clamps it at 65,535).
.
Each output device has a color named
.RB \[lq] default \[rq],
which cannot be redefined.
.
A device's default stroke and fill colors are not necessarily the same.
.
.
.TPx
.REQ .dei "macro"
Define macro indirectly.
.
As
.request .de ,
but use interpolation of string
.I macro
as the name of the defined macro.
.
.
.TPx
.REQ .dei "macro end"
Define macro indirectly.
.
As
.request .de ,
but use interpolations of strings
.I macro
and
.I end
as the names of the defined and end macros.
.
.
.TPx
.REQ .dei1 "macro"
As
.request .dei ,
but disable compatibility mode during macro expansion.
.
.
.TPx
.REQ .dei1 "macro end"
As
.request ".dei\~\f[I]macro\~end\f[]" ,
but disable compatibility mode during macro expansion.
.
.
.TPx
.REQ .device "anything"
Write
.IR anything ,
read in copy mode,
to the intermediate output as a device control command.
.
.TPx
.REQ .devicem "name"
Write contents of macro or string
.I name
to the intermediate output as a device control command.
.
.
.TPx
.REQ .di
Stop directing output to current diversion.
.
.
.TPx
.REQ .di name
Direct output to diversion
.IR name .
.
.TPx
.REQ .do "name \fR\&.\|.\|.\&\fP"
Interpret the string,
request,
diversion,
or macro
.I name
(along with any arguments)
with compatibility mode disabled.
.
Compatibility mode is restored
(only if it was active)
when the
.I expansion
of
.I name
is interpreted.
.
.TPx
.REQ .ds "name \fR[\fPstring\fR]\fP"
Define a string variable
.I name
with contents
.IR string ,
or as empty if
.I string
is omitted.
.
.
.TPx
.REQ .ds1 "name \fR[\fPstring\fR]\fP"
Same as
.request .ds
but with compatibility mode switched off during string expansion.
.
.
.TPx
.REQ .dt
Clear diversion trap.
.
.
.TPx
.REQ .dt "N name"
Set diversion trap to
macro
.I name
at position
.I N
(default scaling indicator\~\c
.scaleindicator v ).
.
.
.TPx
.REQ .ec
Set escape character to
.squoted_char \[rs] .
.
.
.TPx
.REQ .ec "c"
Set escape character to
.IR c .
.
.
.TPx
.REQ .ecr
Restore escape character saved with
.request .ecs .
.
.
.TPx
.REQ .ecs
Save current escape character.
.
.
.TPx
.REQ .el "anything"
Interpret
.I anything
as if it were an input line if the conditional expression of the
corresponding
.request .ie
request was false.
.
.
.TPx
.REQ .em name
Call macro
.I name
after the end of input.
.
.
.TPx
.REQ .eo
Unset escape character,
turning off escape sequence interpretation.
.
.
.TPx
.REQ .ev
Pop environment stack,
returning to previous one.
.
.
.TPx
.REQ .ev "env"
Push current environment onto stack and switch to
.IR env .
.
.
.TPx
.REQ .evc "env"
Copy environment
.I env
to the current one.
.
.
.TPx
.REQ .ex
Exit with successful status.
.
.
.TPx
.REQ .fam
Return to previous font family.
.
.TPx
.REQ .fam "name"
Set the current font family to
.IR name .
.
.TPx
.REQ .fc
Disable field mechanism.
.
.TPx
.REQ .fc "a"
Set field delimiter to\~\c
.I a
and pad glyph to space.
.
.TPx
.REQ .fc "a b"
Set field delimiter to\~\c
.I a
and pad glyph to\~\c
.IR b .
.
.TPx
.REQ .fchar "c anything"
Define fallback character (or glyph)
.I c
as string
.IR anything .
.
.
.TPx
.REQ .fcolor
Restore previous fill color.
.
.
.TPx
.REQ .fcolor "c"
Set fill color to
.IR c .
.
.
.TPx
.REQ .fi
Enable filling of output lines;
a pending output line is broken.
.
Sets
.BR \[rs]n[.u] .
.
.
.TPx
.REQ .fl
Flush output buffer.
.
.TPx
.REQ .fp "n font"
Mount
.I font
at position
.IR n .
.
.TPx
.REQ .fp "n internal external"
Mount font with description file
.I external
under the name
.I internal
at position
.IR n .
.
.TPx
.REQ .fschar "f c anything"
Define fallback character (or glyph)
.I c
for font
.I f
as string
.IR anything .
.
.TPx
.REQ .fspecial "font"
Reset list of special fonts for
.I font
to be empty.
.
.TPx
.REQ .fspecial "font s1 s2 \fR\&.\|.\|.\&\fP"
When the current font is
.IR font ,
then the fonts
.IR s1 ,
.IR s2 ,
\&.\|.\|.\&
are special.
.
.TPx
.REQ .ft
Select previous style or font;
same as
.esc f[]
or
.esc fP .
.
.TPx
.REQ .ft "font"
Select style,
font name,
or mounting position
.IR font ;
same as
.esc[] f font
escape sequence.
.
.TPx
.REQ .ftr "font1 font2"
Translate
.I font1
to
.IR font2 .
.
.TPx
.REQ .fzoom "font"
Don't magnify
.IR font .
.
.TPx
.REQ .fzoom "font zoom"
Set zoom factor for
.I font
(in multiples of 1/1000th).
.
.
.TPx
.REQ .gcolor
Restore previous stroke color.
.
.
.TPx
.REQ .gcolor "c"
Set stroke color to
.IR c .
.
.
.TPx
.REQ .hc
Reset the hyphenation character
.RB to\~ \[rs]%
(the default).
.
.TPx
.REQ .hc char
Change the hyphenation character
.RI to\~ char .
.
.TPx
.REQ .hcode "c1 code1 \fR[\fPc2 code2\fR] .\|.\|.\fP"
Set the hyphenation code of character
.I c1
to
.IR code1 ,
that of
.I c2
to
.IR code2 ,
and so on.
.
.TPx
.REQ .hla lang
Set the hyphenation language to
.IR lang .
.
.TPx
.REQ .hlm n
Set the maximum quantity of consecutive hyphenated lines to
.IR n .
.
.TPx
.REQ .hpf pattern-file
Read hyphenation patterns from
.IR pattern-file .
.
.TPx
.REQ .hpfa pattern-file
Append hyphenation patterns from
.IR pattern-file .
.
.TPx
.REQ .hpfcode "a b \fR[\fPc d\fR] .\|.\|.\fP"
Define mapping values for character codes in pattern files read with the
.request .hpf
and
.request .hpfa
requests.
.
.TPx
.REQ .hw "word \fR.\|.\|.\fP"
Define how each
.I  word
is to be hyphenated,
with each hyphen
.RB \[lq] \- \[rq]
indicating a hyphenation point.
.
.
.TPx
.REQ .hy
Set automatic hyphenation mode to
.BR 1 .
.
.
.TPx
.REQ .hy\~0
Disable automatic hyphenation;
same as
.BR .nh .
.
.
.TPx
.REQ .hy mode
Set automatic hyphenation mode to
.IR mode ;
see section \[lq]Hyphenation\[rq] below.
.
.
.TPx
.REQ .hym
Set the (right) hyphenation margin to
.B 0
(the default).
.
.TPx
.REQ .hym length
Set the (right) hyphenation margin to
.I length
(default scaling indicator\~\c
.scaleindicator m ).
.
.TPx
.REQ .hys
Set the hyphenation space to
.B 0
(the default).
.
.TPx
.REQ .hys hyphenation-space
Suppress hyphenation of the line in adjustment modes
.RB \[lq] b \[rq]
or
.RB \[lq] n \[rq]
if it can be justified by adding no more than
.I hyphenation-space
extra space to each inter-word space
(default scaling indicator\~\c
.scaleindicator m ).
.
.
.TPx
.REQ .ie "cond-expr anything"
If
.I cond-expr
is true,
interpret
.I anything
as if it were an input line,
otherwise skip to a corresponding
.request .el
request.
.
.
.TPx
.REQ .if "cond-expr anything"
If
.I cond-expr
is true,
then interpret
.I anything
as if it were an input line.
.
.
.TPx
.REQ .ig
Ignore input
(except for side effects of
.B \[rs]R
on auto-incrementing registers)
until
.RB \[lq] ..\& \[rq]
occurs at the start of a control line in the current conditional block.
.
.
.TPx
.REQ .ig "end"
Ignore input
(except for side effects of
.B \[rs]R
on auto-incrementing registers)
until
.BI . end
is called at the start of a control line in the current conditional
block.
.
.
.TPx
.REQ .in
Change to previous indentation value.
.
.TPx
.REQ .in "\[+-]N"
Change indentation according to
.I \[+-]N
(default scaling indicator\~\c
.scaleindicator m ).
.
.
.TPx
.REQ .it "n name"
Set an input trap,
calling macro
.IR name ,
after the next
.IR n\~ lines
lines of input that directly produce formatted output have been read.
.
.
.TPx
.REQ .itc "n name"
As
.request .it ,
but lines interrupted with the
.B \[rs]c
escape sequence are not applied to the line count.
.
.
.TPx
.REQ .kern
Enable pairwise kerning.
.
.TPx
.REQ .kern "n"
If
.I n
is zero, disable pairwise kerning, otherwise enable it.
.
.
.TPx
.REQ .lc
Remove leader repetition glyph.
.
.
.TPx
.REQ .lc "c"
Set leader repetition glyph
.RI to\~ c
(default:
.RB \[lq] . \[rq]).
.
.
.TPx
.REQ .length "reg anything"
Compute the number of characters of
.I anything
and store the count
in the register
.IR reg .
.
.
.TPx
.REQ .linetabs
Enable line-tabs mode
(calculate tab positions relative to beginning of output line).
.
.
.TPx
.REQ .linetabs\~0
Disable line-tabs mode.
.
.
.TPx
.REQ .lf "N"
Set input line number to
.IR N .
.
.TPx
.REQ .lf "N file"
Set input line number to
.I N
and filename to
.IR file .
.
.TPx
.REQ .lg "N"
Ligature mode on if
.IR N >0.
.
.TPx
.REQ .ll
Change to previous line length.
.
.TPx
.REQ .ll "\[+-]N"
Set line length according to
.I \[+-]N
(default length
.scalednumber 6.5 i ,
default scaling indicator\~\c
.scaleindicator m ).
.
.
.TPx
.REQ .lsm
Unset the leading space macro (trap).
.
Restore default handling of lines with leading spaces.
.
.
.TPx
.REQ .lsm name
Set the leading space macro (trap) to
.IR name .
.
.
.TPx
.REQ .ls
Change to the previous value of additional intra-line skip.
.
.TPx
.REQ .ls "N"
Set additional intra-line skip value to
.IR N ,
i.e.,
.IR N \-1
blank lines are inserted after each text output line.
.
.TPx
.REQ .lt "\[+-]N"
Length of title (default scaling indicator\~\c
.scaleindicator m ).
.
.TPx
.REQ .mc
Margin glyph off.
.
.TPx
.REQ .mc "c"
Print glyph\~\c
.I c
after each text line at actual distance from right margin.
.
.TPx
.REQ .mc "c N"
Set margin glyph to\~\c
.I c
and distance to\~\c
.I N
from right margin (default scaling indicator\~\c
.scaleindicator m ).
.
.TPx
.REQ .mk "\fR[\fPregister\fR]\fP"
Mark current vertical position in
.IR register ,
or in an internal register used by
.B .rt
if no argument.
.
.
.TPx
.REQ .mso "file"
As
.request .so ,
except that
.I file
is sought in the
.I tmac
directories.
.
.
.TPx
.REQ .msoquiet "file"
As
.request .mso ,
but no warning is emitted if
.I file
does not exist.
.
.
.TPx
.REQ .na
Disable output line adjustment.
.
.
.TPx
.REQ .ne
Need a one-line vertical space.
.
.TPx
.REQ .ne "N"
Need
.I N
vertical space (default scaling indicator\~\c
.scaleindicator v ).
.
.
.TPx
.REQ .nf
Disable filling of output lines;
a pending output line is broken.
.
Clears
.BR \[rs]n[.u] .
.
.
.TPx
.REQ .nh
Disable automatic hyphenation;
same as
.RB \[lq] ".hy 0" \[rq].
.
.TPx
.REQ .nm
Number mode off.
.
.TPx
.REQ .nm "\[+-]N \fR[\fPM \fR[\fPS \fR[\fPI\fR]]]\fP"
In line number mode, set number, multiple, spacing, and indentation.
.
.TPx
.REQ .nn
Do not number next line.
.
.TPx
.REQ .nn "N"
Do not number next
.I N
lines.
.
.
.TPx
.REQ .nop "anything"
Interpret
.I anything
as if it were an input line.
.
.
.TPx
.REQ .nr "register \[+-]N \fR[\fPM\fR]\fP"
Define or modify
.I register
using
.I \[+-]N
with auto-increment
.IR M .
.
.TPx
.REQ .nroff
Make the built-in conditions
.B n
true and
.B t
false.
.
.TPx
.REQ .ns
Turn on no-space mode.
.
.TPx
.REQ .nx
Immediately jump to end of current file.
.
.TPx
.REQ .nx "filename"
Immediately continue processing with file
.IR file .
.
.TPx
.REQ .open "stream filename"
Open
.I filename
for writing and associate the stream named
.I stream
with it.
.
.TPx
.REQ .opena "stream filename"
Like
.request .open
but append to it.
.
.TPx
.REQ .os
Output vertical distance that was saved by the
.request .sv
request.
.
.TPx
.REQ .output "string"
Emit
.I string
directly to intermediate output, allowing leading whitespace if
.I string
starts with
\&\f[CB]\[dq]\f[]
(which is stripped off).
.
.TPx
.REQ .pc
Reset page number character to\~\c
.squoted_char % .
.
.TPx
.REQ .pc "c"
Page number character.
.
.
.TPx
.REQ .pev
Report the state of the current environment followed by that of all
other environments to the standard error stream.
.
.
.TPx
.REQ .pi "program"
Pipe output to
.I program
(nroff only).
.
.TPx
.REQ .pl
Set page length to default
.scalednumber 11 i .
The current page length is stored in register
.BR .p .
.
.TPx
.REQ .pl "\[+-]N"
Change page length to
.I \[+-]N
(default scaling indicator\~\c
.scaleindicator v ).
.
.TPx
.REQ .pm
Report,
to the standard error stream,
the names and sizes in bytes of
defined
macros,
strings,
and
diversions.
.
.TPx
.REQ .pn "\[+-]N"
Next page number
.IR N .
.
.TPx
.REQ .pnr
Print the names and contents of all currently defined registers
on stderr.
.
.TPx
.REQ .po
Change to previous page offset.
.
The current page offset is available in register
.BR .o .
.
.TPx
.REQ .po "\[+-]N"
Page offset
.IR N .
.
.
.TPx
.REQ .ps
Return to previous type size.
.TPx
.
.
.REQ .ps "\[+-]N"
Set/increase/decrease the type size to/by
.I N
scaled points
(a non-positive resulting type size is set to 1\~u);
also see
.esc[] s \[+-]N .
.
.TPx
.REQ .psbb "filename"
Get the bounding box of a PostScript image
.IR filename .
.
.TPx
.REQ .pso "command"
This behaves like the
.request .so
request except that input comes from the standard output of
.IR command .
.
.
.TPx
.REQ .ptr
Report names and positions of all page location traps to the standard
error stream.
.
.
.TPx
.REQ .pvs
Change to previous post-vertical line spacing.
.
.TPx
.REQ .pvs "\[+-]N"
Change post-vertical line spacing according to
.I \[+-]N
(default scaling indicator\~\c
.scaleindicator p ).
.
.TPx
.REQ .rchar "c1 c2 \fR\&.\|.\|.\&\fP"
Remove the definitions of entities
.IR c1 ,
.IR c2 ,
\&.\|.\|.\&
.
.TPx
.REQ .rd "prompt"
Read insertion.
.
.TPx
.REQ .return
Return from a macro.
.
.TPx
.REQ .return "anything"
Return twice, namely from the macro at the current level and from the
macro one level higher.
.
.TPx
.REQ .rfschar "f c1 c2 \fR\&.\|.\|.\&\fP"
Remove the font-specific definitions of glyphs
.IR c1 ,
.IR c2 ,
\&.\|.\|.\& for
.RI font\~ f .
.
.TPx
.REQ .rj "n"
Right justify the next
.I n
input lines.
.
.TPx
.REQ .rm "name"
Remove request, macro, diversion, or string
.IR name .
.
.TPx
.REQ .rn "old new"
Rename request, macro, diversion, or string
.I old
to
.IR new .
.
.TPx
.REQ .rnn "reg1 reg2"
Rename register
.I reg1
to
.IR reg2 .
.
.
.TPx
.REQ .rr ident
Remove register
.IR ident .
.
.
.TPx
.REQ .rs
Restore spacing; turn no-space mode off.
.
.TPx
.REQ .rt
Return
.I (upward only)
to vertical position marked by
.B .mk
on the current page.
.
.TPx
.REQ .rt "\[+-]N"
Return
.I (upward only)
to specified distance from the top of the page (default scaling
indicator\~\c
.scaleindicator v ).
.
.TPx
.REQ .schar "c anything"
Define global fallback character (or glyph)\~\c
.I c
as string
.IR anything .
.
.
.TPx
.REQ .shc
Reset the soft hyphen glyph to
.esc [hy] .
.
.
.TPx
.REQ .shc c
Set the soft hyphen glyph
.RI to\~ c .
.
.
.TPx
.REQ .shift "n"
In a macro, shift the arguments by
.IR n \~\c
positions.
.
.TPx
.REQ .sizes "s1 s2 \f[R].\|.\|.\&\f[] sn \f[R][\f[CB]0\f[]]"
Set available type sizes similarly to the
.B sizes
directive in a
.I DESC
file.
.
Each
.IR s i
is interpreted in units of scaled points (\c
.scaleindicator z ).
.
.
.TPx
.REQ .so file
Replace the request's control line with the contents of
.IR file ,
\[lq]sourcing\[rq] it.
.
.
.TPx
.REQ .soquiet file
As
.request .so ,
but no warning is emitted if
.I file
does not exist.
.
.
.TPx
.REQ .sp
Move the drawing position down one vee.
.
.
.TPx
.REQ .sp N
Move the drawing position vertically by
.I N
(default scaling indicator\~\c
.scaleindicator v ).
.
Positive values are downwards.
.
Prefixing
.I N
with the
.B \[or]
operator moves to a position relative to the page top for positive
.IR N ,
and the bottom if
.I N
is negative;
in all cases,
one line height (vee) is added
.RI to\~ N .
.
.I N
is ignored inside a diversion.
.
.
.TPx
.REQ .special
Reset global list of special fonts to be empty.
.
.TPx
.REQ .special "s1 s2 \fR\&.\|.\|.\&\fR"
Fonts
.IR s1 ,
.IR s2 ,
etc.\& are special and are searched for glyphs not in the
current font.
.
.TPx
.REQ .spreadwarn
Toggle the spread warning on and off (the default) without changing its
value.
.
.TPx
.REQ .spreadwarn N
Emit a
.B break
warning if the additional space inserted for each space between words in
an output line adjusted to both margins is larger than or equal to
.IR N .
.
A negative
.I N
is treated as 0.
.
The default scaling indicator is\~\c
.scaleindicator m .
.
At startup,
.request .spreadwarn
is inactive and
.I N
is
.scalednumber "3 m" .
.
.TPx
.REQ .ss N
Set minimal inter-word spacing to
.IR N \~12ths
of the space width of the current font.
.
.TPx
.REQ .ss "N M"
As
.B .ss\~\c
.IR N ,
and set additional inter-sentence space to
.IR M \~12ths
of the space width of the current font.
.
.TPx
.REQ .stringdown stringvar
Replace each byte in the string named
.I stringvar
with its lowercase version.
.
.TPx
.REQ .stringup stringvar
Replace each byte in the string named
.I stringvar
with its uppercase version.
.
.TPx
.REQ .sty "n style"
Associate
.I style
with font position
.IR n .
.
.TPx
.REQ .substring "str start \fR[\fPend\fR]\fP"
Replace the string named
.I str
with its substring bounded by the indices
.I start
and
.IR end ,
inclusive.
.
Negative indices count backwards from the end of the string.
.
.
.TPx
.REQ .sv
Save
.scalednumber "1 v"
of vertical space.
.TPx
.REQ .sv "N"
Save the vertical distance
.I N
for later output with
.request .os
request (default scaling indicator\~\c
.scaleindicator v ).
.
.TPx
.REQ .sy "command-line"
Execute program
.IR command-line .
.
.
.TPx
.REQ .ta "n1 n2 \fR\&.\|.\|.\&\fP n\fRn\fP \f[CB]T\f[] r1 r2 \
\fR\&.\|.\|.\&\fP r\fRn\fP"
Set tabs at positions
.IR n1 ,
.IR n2 ,
\&.\|.\|.\&,
.IR n n,
then set tabs at
.IR n n+ m \[tmu] r n+ r1
through
.IR n n+ m \[tmu] r n+ r n,
where
.I m
increments from 0,
1,
2,
\&.\|.\|.\& to the output line length.
.
Each
.IR n \~argument
can be prefixed with
.RB a\~\[lq] + \[rq]
to place the tab stop
.I ni
at a distance relative to the previous,
.IR n ( i \-1).
.
Each argument
.IR ni \~or\~ ri
can be suffixed with a letter to align text within the tab column
bounded by tab stops
.IR i \~and\~ i +1;
.RB \[lq] L \[rq]
for left-aligned
(the default),
.RB \[lq] C \[rq]
for centered,
and
.RB \[lq] R \[rq]
for right-aligned.
.
.
.TPx
.REQ .tc
Remove tab repetition glyph.
.
.
.TPx
.REQ .tc "c"
Set tab repetition glyph
.RI to\~ c
(default: none).
.
.
.TPx
.REQ .ti "\[+-]N"
Temporary indent next line (default scaling indicator\~\c
.scaleindicator m ).
.
.TPx
.REQ .tkf "font s1 n1 s2 n2"
Enable track kerning for
.IR font .
.
.TPx
.REQ .tl "\f[CB]\[aq]\f[]left\f[CB]\[aq]\f[]center\f[CB]\[aq]\f[]right\
\f[CB]\[aq]\f[]"
Three-part title.
.
.TPx
.REQ .tm "anything"
Print
.I anything
on stderr.
.
.TPx
.REQ .tm1 "anything"
Print
.I anything
on stderr, allowing leading whitespace if
.I anything
starts with
\&\f[CB]\[dq]\f[]
(which is stripped off).
.
.TPx
.REQ .tmc "anything"
Similar to
.request .tm1
without emitting a final newline.
.
.TPx
.REQ .tr "abcd\fR\&.\|.\|.\&\fP"
Translate
.I a
to
.IR b ,
.I c
to
.IR d ,
etc.\& on output.
.
.TPx
.REQ .trf "filename"
Transparently output the contents of file
.IR filename .
.
.TPx
.REQ .trin "abcd\fR\&.\|.\|.\&\fP"
This is the same as the
.request .tr
request except that the
.B asciify
request uses the character code (if any) before the character
translation.
.
.TPx
.REQ .trnt "abcd\fR\&.\|.\|.\&\fP"
This is the same as the
.request .tr
request except that the translations do not apply to text that is
transparently throughput into a diversion with
.esc ! .
.
.TPx
.REQ .troff
Make the built-in conditions
.B t
true and
.B n
false.
.
.TPx
.REQ .uf "font"
Set underline font to
.I font
(to be switched to by
.request .ul ).
.
.TPx
.REQ .ul "N"
Underline
(italicize in
.I troff
mode)
.I N
input lines.
.
.TPx
.REQ .unformat "diversion"
Unformat space characters and tabs in
.IR diversion ,
preserving font information.
.
.
.TPx
.REQ .vpt
Enable vertical position traps.
.
.
.TPx
.REQ .vpt\~0
Disable vertical position traps.
.
.
.TPx
.REQ .vs
Change to previous vertical spacing.
.
.TPx
.REQ .vs "\[+-]N"
Set vertical spacing to
.I \[+-]N
(default scaling indicator\~\c
.scaleindicator p ).
.
.
.TPx
.REQ .warn
Enable all warning categories.
.
.
.TPx
.REQ .warn\~0
Disable all warning categories.
.
.
.TPx
.REQ .warn n
Enable warnings in categories whose codes sum
.RI to\~ n ;
.\" TODO: Move that table here, perhaps.
see
.MR @g@troff @MAN1EXT@ .
.
.
.TPx
.REQ .warnscale "si"
Set scaling indicator used in warnings to
.IR si .
.
.
.TPx
.REQ .wh N
Remove active trap at vertical position
.IR N ;
a negative value is measured upward from page bottom.
.
.
.TPx
.REQ .wh "N name"
Plant trap,
calling macro
.I name
when page location
.I N
is reached or passed;
a negative value is measured upward from page bottom.
.
Any active trap already present at
.I N
is replaced.
.
.
.TPx
.REQ .while "cond-expr anything"
Evaluate
.IR cond-expr ,
and repeatedly execute
.I anything
unless and until
.I cond-expr
evaluates false.
.
.
.TPx
.REQ .write "stream anything"
Write
.I anything
to the stream named
.IR stream .
.
.TPx
.REQ .writec "stream anything"
Similar to
.request .write
without emitting a final newline.
.
.TPx
.REQ .writem "stream xx"
Write contents of macro or string
.I xx
to the stream named
.IR stream .
.
.LE
.
.
.P
Besides these standard groff requests, there might be further macro
calls.
They can originate from a macro package (see
.MR roff @MAN7EXT@
for an overview) or from a preprocessor.
.
.
.P
Preprocessor macros are easy to recognize.
.
They enclose their code between a pair of characteristic macros.
.
.
.P
.TS
box, center, tab (^);
c | c | c
CfCB | CfCB | CfCB.
preprocessor^start macro^ end macro
=
@g@chem^.cstart^.cend
@g@eqn^.EQ^.EN
grap^.G1^.G2
@g@grn^.GS^.GE
.\" Keep the .IF line below the @g@ideal line.
@g@ideal^.IS^.IE
^^.IF
.\" Keep the .PF line below the @g@pic line.
@g@pic^.PS^.PE
^^.PF
@g@refer^.R1^.R2
@g@soelim^\f[I]none^\f[I]none
@g@tbl^.TS^.TE
_
glilypond^.lilypond start^.lilypond stop
gperl^.Perl start^.Perl stop
gpinyin^.pinyin start^.pinyin stop
.TE
.
.
.P
The \%\[oq]@g@ideal\[cq] preprocessor is not available in
.I groff
yet.
.
.
.\" ====================================================================
.SH "Escape sequences"
.\" ====================================================================
.
Whereas requests must occur on control lines,
escape sequences can occur intermixed with text and appear in arguments
to requests and macros
(and sometimes other escape sequences).
.
An escape sequence is introduced by the escape character,
a backslash
.RB \[lq] \[rs] \[rq]
(but see the
.B .ec
request).
.
The next character identifies the escape's function.
.
Escape sequences vary in length.
.
Some take an argument,
and of those,
some have different syntactical forms for a one-character,
two-character,
or arbitrary-length argument.
.
Others accept only an arbitrary-length argument.
.
In the former convention,
a one-character argument follows the function character immediately,
an opening parenthesis
.RB \[lq] ( \[rq]
introduces a two-character argument
(no closing parenthesis is used),
and an argument of arbitrary length is enclosed in brackets
.RB \[lq] [] \[rq].
.
In the latter convention,
the user selects a delimiter character;
the neutral apostrophe
.RB \[lq] \[aq] \[rq]
is a popular choice and shown in this document.
.
Some characters cannot be used as delimiters;
see subsection \[lq]Escape Sequences\[rq] in the
.I groff
Texinfo manual for details.
.\" TODO: Reproduce that material here, as tersely as possible.
.
A few escape sequences are idiosyncratic,
and support both of the foregoing conventions
.RB (\[lq] \[rs]s \[rq]),
designate their own terminating character
.RB (\[lq] \[rs]? \[rq]),
consume input until the next newline
.RB (\[lq] \[rs]! \[rq],
.RB \[lq] \[rs]" \[rq],
.RB \[lq] \[rs]# \[rq]),
or support an additional modifier character
.RB (\[lq] \[rs]s \[rq]
again).
.
.
.P
Escape sequences serve a variety of purposes.
.
Widespread uses include
commenting the source document;
changing the font style;
setting the type size;
interpolating special characters,
registers,
and strings into the text;
and placing or suppressing break and hyphenation points.
.
As with requests,
use of escape sequences in source documents may interact poorly with a
macro package you use;
consult its documentation to learn of \[lq]safe\[rq] sequences or
alternative facilities it provides to achieve the desired result.
.
.
.P
If the escape character is followed by a character that does not
identify a defined operation,
the escape character is ignored
(producing a diagnostic of the \[lq]escape\[rq] warning type,
which is not enabled by default)
and the following character is processed normally.
.
.
.\" ====================================================================
.SS "Escape sequence short reference"
.\" ====================================================================
.
The escape sequences
.esc \[dq] ,
.esc # ,
.esc $ ,
.esc * ,
.esc ? ,
.esc a ,
.esc e ,
.esc n ,
.esc t ,
.esc g ,
.esc V ,
and
.escarg \& newline
are interpreted even in copy mode.
.
.
.P
.LS
.
.\" ========= comments =========
.
.TP
.ESC \[dq]
Comment.
.
Everything up to the end of the line is ignored.
.
.
.TP
.ESC #
Comment.
.
Everything up to and including the next newline is ignored.
.
.
.\" ========= strings =========
.
.TP
.ESC * s
Interpolate string with one-character
.RI name\~ s .
.
.
.TP
.ESC *( st
Interpolate string with two-character
.RI name\~ st .
.
.
.TP
.ESC[] * string
Interpolate string with name
.I string
(of arbitrary length).
.
.
.TP
.ESC[] * "string arg1 arg2 \fR\&.\|.\|.\fP"
Interpolate string with name
.I string
(of arbitrary length),
taking
.IR arg1 ,
.IR arg2 ,
\&.\|.\|.\&
as arguments.
.
.
.\" ========= macro arguments =========
.
.TP
.ESC $0
Interpolate name by which currently-executing macro was invoked.
.
.
.TP
.ESC $ n
Interpolate macro or string parameter
.RI numbered\~ n
.RI (1\|\[<=]\| n \|\[<=]\|9).
.
.
.TP
.ESC $( nn
Interpolate macro or string parameter
.RI numbered\~ nn
.RI (01\|\[<=]\| nn \|\[<=]\|99).
.
.TP
.ESC[] $ nnn
Interpolate macro or string parameter
.RI numbered\~ nnn
.RI ( nnn \|\[>=]\|1).
.
.
.TP
.ESC $*
Interpolate concatenation of all macro or string parameters,
separated by spaces.
.
.
.TP
.ESC $@
Interpolate concatenation of all macro or string parameters,
with each surrounded by double quotes and separated by spaces.
.
.
.TP
.ESC $\[ha]
Interpolate concatenation of all macro or string parameters
as if they were arguments to the
.request .ds
request.
.
.
.\" ========= escaped characters =========
.
.
.TP
.ESC \[aq]
is a synonym for
.esc [aa] ,
the acute accent special character.
.
.
.TP
.ESC \[ga]
is a synonym for
.esc [ga] ,
the grave accent special character.
.
.
.TP
.ESC \-
is a synonym for
.esc [\-] ,
the minus sign special character.
.
.
.TP
.ESC _
is a synonym for
.esc [ul] ,
the underrule special character.
.
.
.TP
.ESC %
Control hyphenation.
.
.
.TP
.ESC !
Transparent line.
.
The remainder of the input line is interpreted
(1) when the current diversion is read;
or
(2) if in the top-level diversion,
by the postprocessor
(if any).
.
.
.TP
.ESC? anything
Transparently embed
.IR anything ,
read in copy mode,
in a diversion.
.
.
.\" ========= spaces and fixed-width horizontal motions =========
.
.TP
.ESC \f[I]space
Move right one word space.
.
.
.TP
.ESC \[ti]
Insert an unbreakable, adjustable space.
.
.
.TP
.ESC 0
Move right by the width of a numeral in the current font.
.
.
.TP
.ESC |
Move one-sixth em to the right on typesetters.
.
.
.TP
.ESC \[ha]
Move one-twelfth em to the right on typesetters.
.
.
.TP
.ESC &
Non-printing input break.
.
.
.TP
.ESC )
Non-printing input break,
transparent to end-of-sentence recognition.
.
.
.TP
.ESC /
Apply italic correction.
.
Use between an immediately adjacent oblique glyph on the left and an
upright glyph on the right.
.
.
.TP
.ESC ,
Apply left italic correction.
.
Use between an immediately adjacent upright glyph on the left and an
oblique glyph on the right.
.
.
.TP
.ESC :
Non-printing break point
(similar to
.esc % ,
but never produces a hyphen glyph).
.
.
.TP
.ESC "" newline
Continue current input line on the next.
.
.
.\" ========= structuring =========
.
.TP
.ESC {
Begin conditional input.
.
.TP
.ESC }
End conditional input.
.
.\" ========= longer escape names =========
.
.TP
.ESC ( gl
Interpolate glyph with two-character name
.IR gl .
.
.
.TP
.ESC[] "" glyph
Interpolate glyph with name
.I glyph
(of arbitrary length).
.
.
.TP
.ESC[] "" "base-glyph comp1 comp2 \fR\&.\|.\|."
Interpolate composite glyph constructed from
.I base-glyph
and components
.IR comp1 ,
.IR comp2 ,
and so on.
.
.
.TP
.ESC[] "" "\f[CB]char\f[]nnn"
Interpolate glyph of eight-bit encoded character
.IR nnn ,
where
.RI 0\|\[<=]\| nnn \|\[<=]\|255.
.
.
.TP
.ESC[] "" "\f[CB]u\f[]nnnn\f[R][\f[]n\f[R][\f[]n\f[R]]]"
Interpolate glyph of Unicode character with code point
.IR nnnn [ n [ n ]]
in uppercase hexadecimal.
.
.
.TP
.ESC[] "" "\f[CB]u\f[]base-glyph\f[R][\f[]\f[CB]_\f[]\
combining-component\f[R]].\|.\|."
Interpolate composite glyph from Unicode character
.I base-glyph
and
.IR combining-components .
.
.
.\" ========= alphabetical escape sequences =========
.
.TP
.ESC a
In copy mode,
interpolate leader character.
.
.
.TP
.ESCq A anything
Interpolate 1 if
.I anything
is an acceptable identifier for a string,
macro,
diversion,
register,
environment,
or font,
and\~0 otherwise.
.
.TP
.ESCq b string
Build bracket:
pile a sequence of glyphs corresponding to each character in
.I string
vertically,
and center it vertically on the output line.
.
.TP
.ESCq B anything
Interpolate 1 if
.I anything
is a valid numerical expression,
and\~0 otherwise.
.
.
.TP
.ESC c
Continue output line at next input line.
.
.
.TP
.ESCq C glyph
As
.esc[] "" glyph ,
but compatible with other
.I troff \" generic
implementations.
.
.
.TP
.ESC d
Move downward \[12]\~em on typesetters.
.\" XXX: No current groff nroff-mode output driver supports half-line
.\" motions.
.\" (\[12]\~line in
.\" .I nroff
.\" contingent on device support).
.
.
.TP
.ESCq D anything
Send
.I anything
to the output device as a drawing command;
see
.MR groff_out @MAN5EXT@ .
.
.
.TP
.ESC e
Interpolate escape character.
.
.
.TP
.ESC E
As
.esc e ,
but not interpreted in copy mode.
.
.
.TP
.ESC f F
Change to font or style with one-character name or one-digit
.RI position\~ F .
.
.
.TP
.ESC fP
Switch to previous font or style.
.
.
.TP
.ESC f( ft
Change to font with two-character name or two-digit
.RI position\~ ft .
.
.
.TP
.ESC[] f font
Change to font with arbitrarily long name or position
.IR font .
.
.
.TP
.ESC[] f ""
Switch to previous font or style.
.
.
.TP
.ESC F f
Change to font family with one-character
.RI name\~ f .
.
.
.TP
.ESC F( fm
Change to font family with two-character
.RI name\~ fm .
.
.
.TP
.ESC[] F fam
Change to font family with arbitrarily long name
.IR fam .
.
.
.TP
.ESC[] F ""
Switch to previous font family.
.
.
.TP
.ESC g r
Interpolate format of register with one-character
.RI name\~ r .
.
.
.TP
.ESC g( rg
Interpolate format of register with two-character
.RI name\~ rg .
.
.
.TP
.ESC[] g reg
Interpolate format of register with arbitrarily long name
.IR reg .
.
.
.TP
.ESCq h N
Horizontally move the drawing position by
.IR N \~ems
(or specified units);
.B \[or]
may be used.
.
Positive motion is rightward.
.
.
.TP
.ESCq H N
Set height of current font to
.IR N \~scaled
points
(or specified units).
.
.
.TP
.ESC k r
Mark horizontal position in one-character register
.RI name\~ r .
.
.TP
.ESC k( rg
Mark horizontal position in two-character register
.RI name\~ rg .
.
.
.TP
.ESC[] k reg
Mark horizontal position in register with arbitrarily long
.RI name\~ reg .
.
.
.TP
.ESCq l N\f[R][\f[]g\f[R]]
Draw horizontal line of length
.IR N \~ems
(or specified units),
optionally using
.RI glyph\~ g .
.
.
.TP
.ESCq L N\f[R][\f[]g\f[R]]
Draw vertical line of length
.IR N \~vees
(or specified units),
optionally using
.RI glyph\~ g .
.
.
.TP
.ESC m c
Set stroke color to that with one-character
.RI name\~ c .
.
.
.TP
.ESC m( cl
Set stroke color to that with two-character
.RI name\~ cl .
.
.
.TP
.ESC[] m color
Set stroke color to that with arbitrarily long
.RI name\~ color .
.
.
.TP
.ESC[] m ""
Restore previous stroke color.
.
.
.TP
.ESC M c
Set fill color to that with one-character
.RI name\~ c .
.
.
.TP
.ESC M( cl
Set fill color to that with two-character
.RI name\~ cl .
.
.
.TP
.ESC[] M color
Set fill color to that with arbitrarily long
.RI name\~ color .
.
.
.TP
.ESC[] M ""
Restore previous fill color.
.
.
.TP
.ESC n r
Interpolate contents of register with one-character
.RI name\~ r .
.
.
.TP
.ESC n( rg
Interpolate contents of register with two-character
.RI name\~ rg .
.
.
.TP
.ESC[] n reg
Interpolate contents of register with arbitrarily long
.RI name\~ reg .
.
.
.TP
.ESCq N n
Interpolate glyph with
.RI index\~ n
in the current font.
.
.
.TP
.ESCq o abc\fR\&.\|.\|.\&\fP
Overstrike glyphs
.IR a ,
.IR b ,
.IR c ,
and so on.
.
.
.TP
.ESC O0
At the outermost suppression level,
disable emission of glyphs and geometric primitives to the output
driver.
.
.
.TP
.ESC O1
At the outermost suppression level,
enable emission of glyphs and geometric primitives to the output driver.
.
.
.TP
.ESC O2
At the outermost suppression level,
enable glyph and geometric primitive emission to the output driver and
write to the standard error stream the page number,
four bounding box registers enclosing glyphs written since the previous
.B \[rs]O
escape sequence,
the page offset,
line length,
image file name
(if any),
horizontal and vertical device motion quanta,
and input file name.
.
.
.TP
.ESC O3
Begin a nested suppression level.
.
.
.TP
.ESC O4
End a nested suppression level.
.
.
.TP
.ESC[] O "\f[CB]5\f[]Pfile"
At the outermost suppression level,
write the name
.I file
to the standard error stream at
.RI position\~ P ,
which must be one of
.BR l ,
.BR r ,
.BR c ,
or
.BR i .
.
.
.TP
.ESC p
Break output line at next word boundary;
adjust if applicable.
.
.
.TP
.ESC r
Move \[lq]in reverse\[rq] (upward) 1\~em.
.
.
.TP
.ESCq R "name\~\[+-]N"
Set,
increment,
or decrement register
.I name
.RI by\~ N .
.
.
.TP
.ESC s \[+-]N
Set/increase/decrease the type size to/by
.I N
scaled points.
.
.I N
must be a single digit;
0 restores the previous type size.
.
(In compatibility mode only,
a non-zero
.I N
must be in the range 4\[en]39.)
.
Otherwise,
as
.request .ps
request.
.
.
.TP
.ESC s( \[+-]N
.TQ
.fam C
.BI \es \[+-] ( N
.fam
Set/increase/decrease the type size to/by
.I N
scaled points;
.I N
is a two-digit number \[>=]1.
.
As
.request .ps
request.
.
.
.TP
.ESC[] s \[+-]N
.TQ
.fam C
.BI \es \[+-] [ N ]
.fam
.TQ
.ESCq s \[+-]N
.TQ
.fam C
.BI \es \[+-] \[aq] N \[aq]
.fam
Set/increase/decrease the type size to/by
.I N
scaled points.
.
As
.request .ps
request.
.
.
.TP
.ESCq S N
Slant output glyphs by
.I N
degrees;
the direction of text flow is positive.
.
.
.TP
.ESC t
In copy mode,
interpolate tab character.
.
.
.TP
.ESC u
Move upward \[12]\~em on typesetters.
.\" XXX: No current groff nroff-mode output driver supports half-line
.\" motions.
.\" (\[12]\~line in
.\" .I nroff
.\" contingent on device support).
.
.
.TP
.ESCq v N
Vertically move the drawing position by
.IR N \~vees
(or specified units);
.B \[or]
may be used.
.
Positive motion is downward.
.
.
.TP
.ESC V e
Interpolate contents of environment variable with one-character
.RI name\~ e .
.
.
.TP
.ESC V( ev
Interpolate contents of environment variable with two-character
.RI name\~ ev .
.
.
.TP
.ESC[] V env
Interpolate contents of environment variable with arbitrarily long
.RI name\~ env .
.
.
.TP
.ESCq w anything
Interpolate width of
.IR anything ,
formatted in a dummy environment.
.
.
.TP
.ESCq x N
Increase required line space by
.IR N \~vees
(or specified units;
negative before,
positive after).
.
.
.TP
.ESCq X anything
Write
.IR anything ,
read in copy mode,
to the intermediate output as a device control command.
.
.
.TP
.ESC Y n
Write contents of macro or string
.I n
to the intermediate output as a device control command.
.
.
.TP
.ESC Y( nm
Write contents of macro or string
.I nm
to the intermediate output as a device control command.
.
.
.TP
.ESC[] Y name
Write contents of macro or string
.I name
to the intermediate output as a device control command.
.
.
.TP
.ESC z c
Output glyph
.I c
without advancing the print position,
as if it were zero-width.
.
.
.TP
.ESCq Z anything
Print
.I anything
and then restore the horizontal and vertical position;
.I anything
must not contain tabs or leaders.
.
.LE
.
.
.\" ====================================================================
.SH Identifiers
.\" ====================================================================
.
An identifier is a label for an object of syntactical importance like
a register,
a name
(macro,
string,
or diversion),
an environment,
a font,
a style,
a character class,
a glyph,
or a stream,
comprising a sequence of one or more characters with the following
exceptions.
.
.
.IP \[bu]
Spaces,
tabs,
or newlines.
.
.
.IP \[bu]
Invalid input characters;
these are certain control characters
(from the sets \[lq]C0 Controls\[rq] and \[lq]C1 Controls\[rq] as
Unicode describes them).
.
When
.I @g@troff
encounters one in an identifier,
it produces a warning in category
.RB \[lq] input \[rq]
(see section \[lq]Warnings\[rq] in
.MR @g@troff @MAN1EXT@ ).
.
.
.IP
On a machine using the ISO 646,
8859,
or 10646 character encodings,
invalid input characters are
.BR 0x00 ,
.BR 0x08 ,
.BR 0x0B ,
.BR 0x0D \[en] 0x1F ,
and
.BR 0x80 \[en] 0x9F .
.
.
.IP
On an EBCDIC host,
they are
.BR 0x00 \[en] 0x01 ,
.BR 0x08 ,
.BR 0x09 ,
.BR 0x0B ,
.BR 0x0D \[en] 0x14 ,
.BR 0x17 \[en] 0x1F ,
and
.BR 0x30 \[en] 0x3F .
.
.
.IP
Some of these code points are used by
.I @g@troff
internally,
making it non-trivial to extend the program to accept UTF-8 or other
encodings that use characters from these ranges.
.
(Consider what happens when a C1 control
.BR 0x80 \[en] 0x9F
is necessary as a continuation byte in a UTF-8 sequence.)
.
.
.IP
Invalid characters are removed during interpretation;
an identifier
.RB \[lq] foo \[rq],
followed by an invalid character and then
.RB \[lq] bar \[rq],
is processed as
.RB \[lq] foobar \[rq] .
.
.
.\" ====================================================================
.SH Strings
.\" ====================================================================
.
.I groff
has string variables primarily for user convenience.
.
Only one string is predefined by the language.
.
.
.TPx
.STRING .T
Contains the name of the output device
(for example,
.RB \[lq] utf8 \[rq]
or
.RB \[lq] pdf \[rq] ).
.
.
.P
The
.request .ds
request creates a string with a specified name and contents
and the
.esc *
escape sequence dereferences its name,
retrieving the contents.
.
Dereferencing an undefined string name defines it as empty.
.
.
.P
The
.request .as
request is similar to
.request .ds
but appends to a string instead of redefining it.
.
If
.request .as
is called with only one argument,
no operation is performed
(beyond dereferencing it).
.
.
.P
The
.request .ds1
request defines a string such that compatibility mode is off when the
string is later interpolated.
.
Likewise,
the
.request .as1
request is similar to
.BR .as ,
but compatibility mode is switched off when the appended portion of the
string is later interpolated.
.
.
.P
.B Caution:
Unlike other requests,
the second argument to these requests consumes the remainder of the
input line,
including trailing spaces.
.
It is good style to end string definitions
(and appendments)
with a comment,
even an empty one,
to prevent unwanted space from creeping into them during source document
maintenance.
.
.
.P
To store leading space in a string,
start it with a double quote.
.
A double quote is special only in that position;
double quotes in any other location are included in the string
(the effects of escape sequences notwithstanding).
.
.
.P
Macros,
strings,
and diversions share a name space;
see section \[lq]Identifiers\[rq] above.
.
Internally,
the same mechanism is used to store them.
.
You can thus call a macro with string interpolation syntax and vice
versa.
.
Interpolating a string does not hide existing macro arguments.
.
The sequence
.B \[rs]\[rs]
can be placed at the end of a line in a macro definition or,
within a macro definition,
immediately after the interpolation of a macro as a string to suppress
the effect of a newline.
.
.
.P
Several requests exist to perform rudimentary string operations.
.
Strings can be queried
(\c
.request .length )
and modified
(\c
.request .chop ,
.request .substring ,
.request .stringup ,
.request .stringdown ),
and their names can be manipulated through renaming,
removal,
and aliasing
(\c
.request .rn ,
.request .rm ,
.request .als).
.
.
.\" ====================================================================
.SH Registers
.\" ====================================================================
.
Most registers store numerical values
(see section \[lq]Numerical Expressions\[rq] above),
but some
(predefined,
read-only ones)
interpolate text.
.
Each register has a name.
.
A register is defined and assigned with the
.request .nr
request or the
.esc R
escape sequence;
its value is interpolated with the
.esc n
escape sequence.
.
.
.P
Registers can also be incremented or decremented by a configured amount
at the time they are interpolated.
.
The value of the increment is specified with a third argument to the
.request .nr
request,
and a special interpolation syntax,
.BI \[rs]n \[+-]
is used to alter and then retrieve
the register's value.
.
Together,
these features are called
.IR auto-increment .
.
(A negative auto-increment can be
considered an \[lq]auto-decrement\[rq].)
.
.
.P
Many predefined registers are available.
.
In the following presentation,
the register interpolation syntax
.BI \[rs]n[ name ]
is used to refer to a register
.I name
to clearly distinguish it from a string or request
.IR name .
.
The register name space is separate from that used for requests,
macros,
strings,
and diversions.
.
Bear in mind that the symbols
.B \[rs]n[]
are
.I not
part of the register name.
.
.
.\" ====================================================================
.SS "Read-only registers"
.\" ====================================================================
.
The following registers have predefined values that should not be
modified by the user (usually, registers starting with a dot are
read-only).
.
Mostly, they provide information on the current settings or store
results from request calls.
.
.
.P
.LS
.
.TPx
.REG $$
The process ID of
.IR @g@troff .
.
.TPx
.REG .$
Number of arguments in the current macro or string.
.
.TPx
.REG .a
Post-line extra line-space most recently utilized using
.esc x .
.
.TPx
.REG .A
Set to\~1 in
.I @g@troff
if option
.option \-A
is used; always\~1 in
.IR @g@nroff .
.
.TPx
.REG .b
The emboldening offset while
.request .bd
is active.
.
.TPx
.REG .br
Within a macro, set to\~1 if macro called with the \[oq]normal\[cq]
control character, and to\~0 otherwise.
.
.TPx
.REG .c
Current input line number.
.
.TPx
.REG .C
1\~if compatibility mode is in effect, 0\~otherwise.
.
Always\~0 in a
.request .do
request;
see
.register .cp
below.
.
.TPx
.REG .cdp
The depth of the last glyph added to the current environment.
.
It is positive if the glyph extends below the baseline.
.
.
.TPx
.REG .ce
The count of lines remaining to be centered.
.
.
.TPx
.REG .cht
The height of the last glyph added to the current environment.
.
It is positive if the glyph extends above the baseline.
.
.
.TPx
.REG .color
1\~if colors are enabled,
0\~otherwise.
.
.
.TPx
.REG .cp
Within a
.request .do
request,
the saved value of compatibility mode (see
.register .C
above).
.
.TPx
.REG .csk
The skew of the last glyph added to the current environment.
.
The skew of a glyph is how far to the right of the center of a glyph
the center of an accent over that glyph should be placed.
.
.TPx
.REG .d
Current vertical place in current diversion; equal to register
.BR nl .
.
.TPx
.REG .ev
The name of the current environment (string-valued).
.
.
.TPx
.REG .f
Mounting position index of the current font.
.
.
.TPx
.REG .F
The name of the current input file (string-valued).
.
.TPx
.REG .fam
The current font family (string-valued).
.
.TPx
.REG .fn
The current (internal) real font name (string-valued).
.
.
.TPx
.REG .fp
The next free font mounting position index.
.
.
.TPx
.REG .g
Always 1 in GNU
.IR troff . \" GNU
.
Use to test if running under
.IR groff .
.
.
.TPx
.REG .h
Text baseline high-water mark on page or in diversion.
.
.
.TPx
.REG .H
Number of basic units per horizontal unit of output device resolution.
.
.TPx
.REG .height
The current font height as set with
.esc H .
.
.TPx
.REG .hla
The hyphenation language in the current environment.
.
.TPx
.REG .hlc
The count of immediately preceding consecutive hyphenated lines in the
current environment.
.
.
.TPx
.REG .hlm
The maximum quantity of consecutive hyphenated lines allowed in the
current environment.
.
.
.TPx
.REG .hy
The automatic hyphenation mode in the current environment.
.
.TPx
.REG .hym
The hyphenation margin in the current environment.
.
.TPx
.REG .hys
The hyphenation space adjustment threshold in the current environment.
.
.TPx
.REG .i
Current indentation.
.
.TPx
.REG .in
The indentation that applies to the current output line.
.
.TPx
.REG .int
Positive if last output line contains
.esc c .
.
.
.TPx
.REG .j
Adjustment mode encoded as an integer.
.
Do not interpret or perform arithmetic on its value.
.
.
.TPx
.REG .k
The current horizontal output position (relative to the current
indentation).
.
.
.TPx
.REG .kern
1\~if pairwise kerning is enabled, 0\~otherwise.
.
.TPx
.REG .l
Current line length.
.
.TPx
.REG .L
The current line spacing setting as set by
.request .ls .
.
.TPx
.REG .lg
The current ligature mode (as set by the
.request .lg
request).
.
.TPx
.REG .linetabs
The current line-tabs mode (as set by the
.request .linetabs
request).
.
.TPx
.REG .ll
The line length that applies to the current output line.
.
.TPx
.REG .lt
The title length (as set by the
.request .lt
request).
.
.
.TPx
.REG .m
Stroke color (string-valued).
.
.
.TPx
.REG .M
Fill color (string-valued).
.
.
.TPx
.REG .n
Length of text portion on previous output line.
.
.TPx
.REG .ne
The amount of space that was needed in the last
.request .ne
request that caused a trap to be sprung.
.
Useful in conjunction with register
.BR .trunc .
.
.
.TPx
.REG .nm
1\~if output line numbering is enabled
(even if temporarily suppressed),
0\~otherwise.
.
.
.TPx
.REG .ns
1\~if in no-space mode, 0\~otherwise.
.
.TPx
.REG .o
Current page offset.
.
.TPx
.REG .O
The suppression nesting level (see
.esc O ).
.
.TPx
.REG .p
Current page length.
.
.TPx
.REG .P
1\~if the current page is being printed, 0\~otherwise (as determined by
the
.option \-o
command-line option).
.
.TPx
.REG .pe
1\~during page ejection, 0\~otherwise.
.
.TPx
.REG .pn
The number of the next page: either the value set by a
.request .pn
request, or the number of the current page plus\ 1.
.
.TPx
.REG .ps
The current type size in scaled points.
.
.
.TPx
.REG .psr
The last-requested type size in scaled points.
.
.
.TPx
.REG .pvs
The current post-vertical line spacing.
.
.
.TPx
.REG .R
The count of available unused registers;
always 10,000 in GNU
.IR troff . \" GNU
.
.
.TPx
.REG .rj
The count of lines remaining to be right-aligned.
.
.
.TPx
.REG .s
Current type size in points as a decimal fraction
(string-valued).
.
.
.TPx
.REG .slant
The slant of the current font as set with
.esc S .
.
.
.TPx
.REG .sr
The last requested type size in points as a decimal fraction
(string-valued).
.
.
.TPx
.REG .ss
Size of minimal inter-word spacing in twelfths of the space width of the
current font.
.
.TPx
.REG .sss
Size of additional inter-sentence space in twelfths of the space width
of the current font.
.
.TPx
.REG .sty
The current font style (string-valued).
.
.
.TPx
.REG .t
Distance to the next vertical position trap.
.
.
.TPx
.REG .T
Set to\~1
if option
.option \-T
is used.
.
.TPx
.REG .tabs
A string representation of the current tab settings suitable for use
as an argument to the
.request .ta
request.
.
.TPx
.REG .trunc
The amount of vertical space truncated by the most recently sprung
vertical position trap,
or,
if the trap was sprung by an
.request .ne
request,
minus the amount of vertical motion produced by
.request .ne .
.
Useful in conjunction with the
.register .ne .
.
.
.TPx
.REG .u
Equal to 1 if filling is enabled,
0 otherwise.
.
.
.TPx
.REG .U
1\~in unsafe mode and 0\~otherwise.
.
.
.TPx
.REG .v
Current vertical line spacing.
.
.TPx
.REG .V
Number of basic units per vertical unit of output device resolution.
.
.
.TPx
.REG .vpt
1\~if vertical position traps are enabled, 0\~otherwise.
.
.
.TPx
.REG .w
Width of previous glyph.
.
.
.TPx
.REG .warn
The sum of the numeric codes of currently enabled warning categories.
.
.
.TPx
.REG .x
The major version number of the running
.I @g@troff
formatter.
.
.
.TPx
.REG .y
The minor version number of the running
.I @g@troff
formatter.
.
.
.TPx
.REG .Y
The revision number of the running
.I @g@troff
formatter.
.
.
.TPx
.REG .z
Name of current diversion.
.
.TPx
.REG .zoom
Zoom factor for current font (in multiples of 1/1000th; zero if no
magnification).
.LE
.
.
.\" ====================================================================
.SS "Writable registers"
.\" ====================================================================
.
The following registers can be read and written by the user.
They have predefined default values, but these can be modified for
customizing a document.
.
.
.P
.LS
.TPx
.REG %
Current page number.
.
.TPx
.REG c.
Current input line number.
.
.TPx
.REG ct
Character type (set by width function
.esc w ).
.
.TPx
.REG dl
Maximal width of last completed diversion.
.
.TPx
.REG dn
Height of last completed diversion.
.
.TPx
.REG dw
Current day of week (1\(en7).
.
.TPx
.REG dy
Current day of month (1\(en31).
.
.TPx
.REG hours
The number of hours past midnight.
.
Initialized at startup.
.
.TPx
.REG hp
Current horizontal position at input line.
.
.TPx
.REG llx
Lower left x-coordinate (in PostScript units) of a given PostScript
image (set by
.request .psbb ).
.
.TPx
.REG lly
Lower left y-coordinate (in PostScript units) of a given PostScript
image (set by
.request .psbb ).
.
.TPx
.REG ln
Output line number.
.
.
.TPx
.REG lsn
The count of leading spaces on an input line.
.
.
.TPx
.REG lss
The amount of horizontal space corresponding to the leading spaces
on an input line.
.
.
.TPx
.REG minutes
The number of minutes after the hour.
.
Initialized at startup.
.
.TPx
.REG mo
Current month (1\(en12).
.
.
.TPx
.REG nl
Current vertical position.
.
.
.TPx
.REG opmaxx
.TPx
.REG opmaxy
.TPx
.REG opminx
.TPx
.REG opminy
These four registers mark the top left and bottom right hand corners of
a box which encompasses all written glyphs.
They are reset to \-1 by
.B \[rs]O0
or
.BR \[rs]O1 .
.
.TPx
.REG rsb
Like register
.BR sb ,
but takes account of the heights and depths of glyphs.
.
.TPx
.REG rst
Like register
.BR st ,
but takes account of the heights and depths of glyphs.
.
.TPx
.REG sb
Depth of string below baseline
(generated by width function
.esc w ).
.
.TPx
.REG seconds
The number of seconds after the minute.
.
Initialized at startup.
.
.TPx
.REG skw
Right skip width from the center of the last glyph in the
.esc w
argument.
.
.
.TPx
.REG slimit
If >0,
sets the maximum quantity of objects on
.IR @g@troff 's
internal input stack.
.
If \[<=]0,
there is no limit:
recursion can continue until program memory is exhausted.
.
The default is 1,000.
.
.
.TPx
.REG ssc
The amount of horizontal space (possibly negative) that should be
added to the last glyph before a subscript (generated by width
function
.esc w ).
.
.TPx
.REG st
Height of string above baseline
(generated by width function
.esc w ).
.
.TPx
.REG systat
The return value of the
.I system()
function executed by the last
.request .sy
request.
.
.TPx
.REG urx
Upper right x-coordinate (in PostScript units) of a given PostScript
image (set by
.request .psbb ).
.
.TPx
.REG ury
Upper right y-coordinate (in PostScript units) of a given PostScript
image (set by
.request .psbb ).
.
.TPx
.REG year
The current year.
.
.TPx
.REG yr
The current year minus 1900.
.
.LE
.
.
.\" ====================================================================
.SH Hyphenation
.\" ====================================================================
.
When filling,
.I groff
hyphenates words as needed at user-specified and automatically
determined hyphenation points.
.
Explicitly hyphenated words such as \[lq]mother-in-law\[rq] are always
eligible for breaking after each of their hyphens.
.
The hyphenation
.RB character\~ \[rs]%
and non-printing break
.RB point\~ \[rs]:
escape sequences may be used to control the hyphenation and breaking of
individual words.
.
The
.B .hw
request sets user-defined hyphenation points for specified words at any
subsequent occurrence.
.
Otherwise,
.I groff
determines hyphenation points automatically by default.
.
.
.P
Several requests influence automatic hyphenation.
.
Because conventions vary,
a variety of hyphenation modes is available to the
.B .hy
request;
these determine whether hyphenation will apply to a word prior to
breaking a line at the end of a page
(more or less;
see below for details),
and at which positions within that word automatically determined
hyphenation points are permissible.
.
The default is
.RB \[lq] 1 \[rq]
for historical reasons,
but this is not an appropriate value for the English hyphenation
patterns used by
.IR groff ;
localization macro files loaded by
.I troffrc
and macro packages often override it.
.
.
.TP
.B 0
disables hyphenation.
.
.
.TP
.B 1
enables hyphenation except after the first and before the last character
of a word.
.
.
.P
The remaining values \[lq]imply\[rq]
.BR 1 ;
that is,
they enable hyphenation under the same conditions as
.RB \[lq] ".hy 1" \[rq],
and then apply or lift restrictions relative to that basis.
.
.
.TP
.B 2
disables hyphenation of the last word on a page.
.
(Hyphenation is prevented if the next page location trap is closer to
the vertical drawing position than the next text baseline would be.
.
.I groff
automatically inserts an implicit page location trap at the end of each
page to cause a page transition.
.
Users or macro packages can set such traps explicitly to prevent
hyphenation of the last word in a column in multi-column page layouts or
before floating figures or tables.
.
See section \[lq]Traps\[rq] below.)
.
.
.TP
.B 4
disables hyphenation before the last two characters of a word.
.
.
.TP
.B 8
disables hyphenation after the first two characters of a word.
.
.
.TP
.B 16
enables hyphenation before the last character of a word.
.
.
.TP
.B 32
enables hyphenation after the first character of a word.
.
.
.P
Apart from value\~2,
restrictions imposed by the hyphenation mode are
.I not
respected for words whose hyphenations have been explicitly specified
with the hyphenation character
.RB (\[lq] \[rs]% \[rq]
by default)
or the
.B .hw
request.
.
.
.P
The nonzero values above are additive.
.
For example,
value\~12 causes
.I groff
to hyphenate neither the last two nor the first two characters of a
word.
.
Some values cannot be used together because they contradict;
for instance,
values 4 and\~16,
and values 8 and\~32.
.
As noted,
it is superfluous to add\~1 to any nonzero even mode.
.
.
.P
The places within a word that are eligible for hyphenation are
determined by language-specific data
.RB ( .hla ,
.BR .hpf ,
and
.BR .hpfa )
and lettercase relationships
.RB ( .hcode
and
.BR .hpfcode ).
.
Furthermore,
hyphenation of a word might be suppressed because too many previous
lines have been hyphenated
.RB ( .hlm ),
the line has not reached a certain minimum length
.RB ( .hym ),
or the line can instead be adjusted with up to a certain amount of
additional inter-word space
.RB ( .hys ).
.
.
.\" ====================================================================
.SH Localization
.\" ====================================================================
.
The set of hyphenation patterns is associated with the hyphenation
language set by the
.B .hla
request.
.
The
.B .hpf
request is usually invoked by a localization file loaded by the
.I troffrc
file.
.
By default,
.I troffrc
loads the localization file for English.
.
(As of
.I groff
1.23.0,
localization files for Czech
.RI ( cs ),
German
.RI ( de ),
English
.RI ( en ),
French
.RI ( fr ),
Japanese
.RI ( ja ),
Swedish
.RI ( sv ),
and Chinese
.RI ( zh )
exist.)
.
For Western languages,
the localization file sets the hyphenation mode and loads hyphenation
patterns and exceptions.
.
It also (re-)defines translatable strings and macros that packages use
to handle localization tasks,
such as formatting the calendar date.
.
.
.\" ====================================================================
.SH "Writing macros"
.\" ====================================================================
.
The
.B .de
request defines a macro replacing the definition of any existing
request,
macro,
string,
or diversion of the same name.
.
.I @g@troff
enters \[lq]copy mode\[rq]
(see below),
storing subsequent input lines as the definition.
.
If the optional second argument is not specified,
the definition ends with the control line
.RB \[lq] .. \[rq]\&
(two dots).
.
Alternatively,
a second argument names a macro whose call syntax ends the definition;
this \[lq]end macro\[rq] is then called normally.
.
Spaces or tabs are permitted after the first control character in the
line containing this ending token,
but a tab immediately after the token prevents its recognition as the
end of a macro definition.
.
Macro definitions can be nested;
this requires use of unique end macros for each nested definition or
escaping of the line with the ending token.
.
An end macro need not be defined until it is called.
.
This fact enables a nested macro definition to begin inside one macro
and end inside another.
.
.
.P
Variants of
.B .de
that disable compatibility mode and/or indirect the names of the macros
being defined or ending the definition through strings are available as
.BR .de1 ,
.BR .dei ,
and
.BR .dei1 .
.
Existing macro definitions can be appended to with
.BR .am ,
.BR .am1 ,
.BR .ami ,
and
.BR .ami1 .
.
The
.BR .als ,
.BR .rm ,
and
.B .rn
requests create an alias of,
remove,
and rename a macro,
respectively.
.
.B .return
stops the execution of a macro immediately,
returning to the enclosing context.
.
.
.\" ====================================================================
.SS Parameters
.\" ====================================================================
.
Macro call and string interpolation parameters can be accessed using
escape sequences starting with
.RB \[lq] \[rs]$ \[rq].
.
The
.B \[rs]n[.$]
read-only register stores the count of parameters available to a macro
or string;
its value can be changed by the
.B .shift
request,
which dequeues parameters from the current list.
.
The
.B \[rs]$0
escape sequence interpolates the name by which a macro was called.
.
Applying string interpolation to a macro does not change this name.
.
.
.\" ====================================================================
.SS "Copy mode"
.\" ====================================================================
.
When
.I @g@troff
processes certain requests,
most importantly those which define or append to a macro or string,
it does so in
.IR "copy mode" :
it copies the characters of the definition into a dedicated storage
region,
interpolating the escape sequences
.BR \[rs]n ,
.BR \[rs]g ,
.BR \[rs]$ ,
.BR \[rs]* ,
.BR \[rs]V ,
and
.B \[rs]?\&
normally;
interpreting
.BI \[rs] newline
immediately;
discarding comments
.B \[rs]"
and
.BR \[rs]# ;
interpolating the current leader,
escape,
or tab character with
.BR \[rs]a ,
.BR \[rs]e ,
and
.BR \[rs]t ,
respectively;
and storing all other escape sequences in an encoded form.
.
The complement of copy mode\[em]a
.I roff
formatter's behavior when not defining or appending to a macro,
string,
or diversion\[em]where all macros are interpolated,
requests invoked,
and valid escape sequences processed immediately upon recognition,
can be termed
.IR "interpretation mode" .
.
.
.P
The escape character,
.B \[rs]
by default,
can escape a backslash.
.
This enables you to control whether a given
.BR \[rs]n ,
.BR \[rs]g ,
.BR \[rs]$ ,
.BR \[rs]* ,
.BR \[rs]V ,
or
.B \[rs]?\&
escape sequence is interpreted at the time the macro containing it is
defined,
or later when the macro is called.
.
.
.P
You can think of
.B \[rs]\[rs]
as a \[lq]delayed\[rq] backslash;
it is the escape character followed by a backslash from which the escape
character has removed its special meaning.
.
Consequently,
.B \[rs]\[rs]
is not an escape sequence in the usual sense.
.
In any escape sequence
.BI \[rs] X
that
.I @g@troff
does not recognize,
the escape character is ignored and
.IR X \~is
output,
with two exceptions,
.B \[rs]\[rs]
being one.
.
The other is
.BR \[rs]. ,
which escapes the control character.
.
It is used to permit nested macro definitions to end without a named
macro call to conclude them.
.
Without a syntax for escaping the control character,
this would not be possible.
.
.I roff
documents should not use the
.B \[rs]\[rs]
or
.B \[rs].\&
character sequences outside of copy mode;
they serve only to obfuscate the input.
.
Use
.B \[rs]e
to represent the escape character,
.B \[rs][rs]
to obtain a backslash glyph,
and
.B \[rs]&
before
.RB \[lq] .\& \[rq]
and
.RB \[lq] \[aq] \[rq]
where
.I @g@troff
expects them as control characters if you mean to use them literally.
.
.
.P
Macro definitions can be nested to arbitrary depth.
.
In
.RB \[lq] \[rs]\[rs] \[rq],
each escape character is interpreted twice\[em]once in copy mode,
when the macro is defined,
and once outside of it,
when the macro is called.
.
This fact leads to exponential growth in the quantity of escape
characters required to delay interpolation of
.BR \[rs]n ,
.BR \[rs]g ,
.BR \[rs]$ ,
.BR \[rs]* ,
.BR \[rs]V ,
and
.B \[rs]?\&
at each nesting level.
.
An alternative is to use
.BR \[rs]E ,
which represents an escape character that is not interpreted in copy
mode.
.
Because
.B \[rs].\&
is not a true escape sequence,
we can't use
.B \[rs]E
to keep
.RB \[lq] ..\& \[rq]
from ending a macro definition prematurely.
.
If the multiplicity of backslashes complicates maintenance,
use end macros.
.
.
.\" ====================================================================
.SH Traps
.\" ====================================================================
.
.I Traps
are locations in the output,
or conditions on the input that,
when reached or fulfilled,
cause a specified macro to be called.
.
These traps can occur at a given location on the page
.RB ( .wh ,\~ .ch );
at a given location in the current diversion
.RB ( .dt )\[em]together,
these are known as
vertical position traps,
which can be disabled and re-enabled
.RB ( .vpt );
at a blank line
.RB ( .blm );
at a line with leading space characters
.RB ( .lsm );
after a certain number of input lines
.RB ( .it ,\~ .itc );
or at the end of input
.RB ( .em ).
.
Macros called by traps are passed no arguments.
.
Setting a trap is also called
.I planting
one.
.
It is said that a trap is
.I sprung
if its condition is fulfilled.
.
.
.P
Registers associated with trap management include
vertical position trap enablement status
.RB ( \[rs]n[.vpt] ),
distance to the next trap
.RB ( \[rs]n[.t] ),
amount of needed
.RB ( .ne -requested )
space that caused the most recent vertical position trap to be sprung
.RB ( \[rs]n[.ne] ),
amount of needed space truncated from the amount requested
.RB ( \[rs]n[.trunc] ),
page ejection status
.RB ( \[rs]n[.pe] ),
and
leading space count
.RB ( \[rs]n[.lsn] )
with its corresponding amount of motion
.RB ( \[rs]n[.lss] ).
.
.
.\" ====================================================================
.SH Environments
.\" ====================================================================
.
.\" BEGIN Keep (roughly) parallel with groff.texi node "Environments".
Environments store most of the parameters that control text processing.
.
A default environment named
.RB \[lq] 0 \[rq]
exists when
.I @g@troff
starts up;
it is modified by formatting-related requests and escape sequences.
.
.
.P
You can create new environments and switch among them.
.
Only one is current at any given time.
.
Active environments are managed using a
.I stack,
a data structure supporting \[lq]push\[rq] and \[lq]pop\[rq] operations.
.
The current environment is at the top of the stack.
.
The same environment name can be pushed onto the stack multiple times,
possibly interleaved with others.
.
.
.P
Popping the environment stack does not destroy the current environment;
it remains accessible by name and can be made current again by pushing
it at any time.
.
Environments cannot be renamed or deleted,
and can only be modified when current.
.
To inspect the environment stack,
use the
.B pev
request;
see section \[lq]Debugging\[rq] below.
.
.
.P
Environments store the following information.
.
.
.IP \[bu] 2n
typeface parameters
(size,
family,
style,
glyph height and slant,
inter-word and inter-sentence space sizes)
.
.
.IP \[bu]
page parameters
(line length,
title length,
vertical spacing,
line
spacing,
indentation,
line numbering,
centering,
right-justifying,
underlining,
hyphenation data)
.
.
.IP \[bu]
filling enablement,
adjustment enablement and mode
.
.
.IP \[bu]
tab stops; tab and leader characters; escape,
control,
no-break control,
hyphenation control,
and margin characters
.
.
.IP \[bu]
partially collected lines
.
.
.IP \[bu]
input traps
.
.
.IP \[bu]
stroke and fill colors
.
.
.P
The
.B ev
request pushes to and pops from the environment stack,
while
.B evc
copies a named environment's contents to the current one.
.\" END Keep (roughly) parallel with groff.texi node "Environments".
.
.
.\" ====================================================================
.SH Underlining
.\" ====================================================================
.
In
.I RUNOFF
(see
.MR roff @MAN7EXT@ ),
underlining,
even of lengthy passages,
was straightforward because only fixed-pitch printing devices were
targeted.
.
Typesetter output posed a greater challenge.
.
There exists a
.I groff
request
.B .ul
(see above)
that underlines subsequent source lines on terminal devices,
but on typesetters,
it selects an italic font style instead.
.
.
The
.I ms
macro package
(see
.MR groff_ms @MAN7EXT@ )
offers a macro
.BR .UL ,
but it too produces the desired effect only on typesetters,
and has other limitations.
.
.
.P
One could adapt
.IR ms 's
approach to the construction of a macro as follows.
.
.RS
.EX
\&.de UNDERLINE
\&. ie n \[rs]\[rs]$1\[rs]f[I]\[rs]\[rs]$2\[rs]f[P]\[rs]\[rs]$3
\&. el \[rs]\[rs]$1\[rs]Z\[aq]\[rs]\[rs]$2\[aq]\[rs]v\[aq].25m\[aq]\
\[rs]D\[aq]l \[rs]w\[aq]\[rs]\[rs]$2\[aq]u 0\[aq]\[rs]v\[aq]\-.25m\
\[aq]\[rs]\[rs]$3
\&..
.EE
.RE
.
If
.MR doclifter 1
makes trouble, change the macro name
.B UNDERLINE
into some 2-letter word, like
.BR Ul .
.
Moreover,
change the form of the font selection escape sequence from
.B \[rs]f[P]
to
.BR \[rs]fP .
.
.
.\" ====================================================================
.SS "Underlining without macro definitions"
.\" ====================================================================
.
If one does not want to use macro definitions, e.g., when
.B doclifter
gets lost, use the following:
.
.RS
.EX
\&.ds u1 before
\&.ds u2 in
\&.ds u3 after
\&.ie n \[rs]*[u1]\[rs]f[I]\[rs]*[u2]\[rs]f[P]\[rs]*[u3]
\&.el \[rs]*[u1]\[rs]Z\[aq]\[rs]*[u2]\[aq]\[rs]v\[aq].25m\[aq]\[rs]D\
\[aq]l \[rs]w\[aq]\[rs]*[u2]\[aq]u 0\[aq]\[rs]v\[aq]\-.25m\[aq]\[rs]*\
[u3]
.EE
.RE
.
When using
.BR doclifter ,
it might be necessary to change syntax forms such as
.B \e[xy]
and
.B \e*[xy]
to those supported by AT&T
.IR troff :
.B \e*(xy
and
.BR \e(xy ,
and so on.
.
.
.P
Then these lines could look like
.RS
.EX
\&.ds u1 before
\&.ds u2 in
\&.ds u3 after
\&.ie n \[rs]*[u1]\[rs]fI\[rs]*(u2\[rs]fP\[rs]*(u3
\&.el \[rs]*(u1\[rs]Z\[aq]\[rs]*(u2\[aq]\[rs]v\[aq].25m\[aq]\[rs]D\
\[aq]l \[rs]w\[aq]\[rs]*(u2\[aq]u 0\[aq]\[rs]v\[aq]\-.25m\[aq]\[rs]*(u3
.EE
.RE
.
.
.P
The result looks like
.RS
.ft CR
before
\z\[ul]i\
\z\[ul]n
after
.ft R
.RE
.
.
.\" ====================================================================
.SS "Underlining with overstriking \ez and \e(ul"
.\" ====================================================================
.
There is another possibility for underlining by using overstriking
with
.BI \ez c
(print
.I c
with zero width without spacing) and
.B \e(ul
(underline character).
.
This produces the underlining of 1 character, both in
.B nroff
and in
.BR troff .
.
.
.P
For example the underlining of a character say
.B t
looks like
.B \ez\e[ul]t
or
.B \ez\e(ult
.
.
.P
Longer words look then a bit strange, but a useful mode is to write
each character into a whole own line.
.
To underlines the 3 character part "tar" of the word "start":
.
.RS
.EX
.br
before s\[rs]
\[rs]z\[rs][ul]t\[rs]
\[rs]z\[rs][ul]a\[rs]
\[rs]z\[rs][ul]r\[rs]
t after
.EE
.RE
.
or
.
.RS
.EX
.br
before s\[rs]
\[rs]z\[rs](ult\[rs]
\[rs]z\[rs](ula\[rs]
\[rs]z\[rs](ulr\[rs]
t after
.EE
.RE
.
.
.P
The result looks like
.RS
.ft CR
before s\
\z\[ul]t\
\z\[ul]a\
\z\[ul]r\
t after
.ft R
.RE
.
.
.\" ====================================================================
.SH Compatibility
.\" ====================================================================
.
The differences between the
.I roff
language recognized by GNU
.I troff \" GNU
and that of AT&T
.IR troff , \" AT&T
as well as the device,
font,
and device-independent intermediate output formats described by
CSTR\~#54 are documented in
.MR groff_diff @MAN7EXT@ .
.
.
.P
.I groff
provides an AT&T compatibility mode;
see
.MR groff @MAN1EXT@ .
.
.
.\" ====================================================================
.SH Debugging
.\" ====================================================================
.
.\" BEGIN Keep (roughly) parallel with groff.texi node "Debugging".
.I groff
is not the easiest language to debug,
in part thanks to its design features of recursive interpolation and the
use of multi-stage pipeline processing in the surrounding system.
.
Nevertheless there exist several features useful for troubleshooting.
.
.
.P
Preprocessors use the
.B .lf
request to preserve the identities of line numbers and names of input
files.
.
.I groff
emits a variety of error diagnostics and supports several categories of
warning;
the output of these can be selectively suppressed with
.B .warn
(and see the
.BR \-E ,
.BR \-w ,
and
.B \-W
options of
.MR @g@troff @MAN1EXT@ ).
.
Backtraces can be automatically produced when errors or warnings occur
(the
.B \-b
option of
.MR @g@troff @MAN1EXT@ )
or generated on demand
.RB ( .backtrace ).
.
.BR .tm ,
.BR .tmc ,
and
.B .tm1
can be used to emit customized diagnostic messages or for
instrumentation while troubleshooting.
.
.B .ex
and
.B .ab
cause early termination with successful and error exit codes
respectively,
to halt further processing when continuing would be fruitless.
.
The state of the formatter can be examined with requests that write
lists of defined names\[em]macros,
strings,
and
.RB diversions\[em]( .pm );
environments
.RB ( .pev ),
registers
.RB ( .pnr ),
and page location traps
.RB ( .ptr )
to the standard error stream.
.\" END Keep (roughly) parallel with groff.texi node "Debugging".
.
.
.\" ====================================================================
.SH Authors
.\" ====================================================================
.
This document was written by
.MT groff\-bernd\:.warken\-72@\:web\:.de
Bernd Warken
.ME
and revised by
.MT g.branden\:.robinson@\:gmail\:.com
G.\& Branden Robinson
.ME .
.
.
.\" ====================================================================
.SH "See also"
.\" ====================================================================
.
.IR "Groff: The GNU Implementation of troff" ,
by Trent A.\& Fisher and Werner Lemberg,
is the primary
.I groff
manual.
.
You can browse it interactively with \[lq]info groff\[rq].
.
.
.P
\[lq]Troff User's Manual\[rq]
by Joseph F.\& Ossanna,
1976
(revised by Brian W.\& Kernighan,
1992),
AT&T Bell Laboratories Computing Science Technical Report No.\& 54,
widely called simply \[lq]CSTR\~#54\[rq],
documents the language,
device and font description file formats,
and device-independent output format
referred to collectively in
.I groff
documentation as
.RI \[lq]AT&T\~ troff \[rq].
.
.
.P
\[lq]A Typesetter-independent TROFF\[rq]
by Brian W.\& Kernighan,
1982,
AT&T Bell Laboratories Computing Science Technical Report No.\& 97
(CSTR\~#97),
provides additional insights into the
device and font description file formats
and device-independent output format.
.
.
.TP
.MR groff @MAN1EXT@
is the preferred interface to the
.I groff
system;
it manages the pipeline that carries a source document through
preprocessors,
the
.I @g@troff
formatter,
and an output driver to viewable or printable form.
.
It also exhaustively lists the man pages provided with the GNU
.I roff
system.
.
.
.TP
.MR groff_char @MAN7EXT@
discusses character encoding issues,
escape sequences that produce glyphs,
and enumerates
.IR groff 's
predefined special character escape sequences.
.
.
.TP
.MR groff_diff @MAN7EXT@
covers the differences between the
GNU
.I troff \" GNU
formatter,
its device and font description file formats,
its device-independent output format,
and those of AT&T
.IR troff ,\" AT&T
whose design it reimplements.
.
.
.TP
.MR groff_font @MAN5EXT@
describes the formats of the files that describe devices
.RI ( DESC )
and fonts.
.
.
.TP
.MR groff_tmac @MAN5EXT@
surveys macro packages provided with
.IR groff ,
describes how documents can take advantage of them,
offers guidance on writing macro packages and using diversions,
and includes historical information on macro package naming conventions.
.
.
.TP
.MR roff @MAN7EXT@
presents a detailed history of
.I roff
systems and summarizes concepts common to them.
.
.
.\" Restore compatibility mode (for, e.g., Solaris 10/11).
.cp \n[*groff_groff_7_man_C]
.do rr *groff_groff_7_man_C
.
.
.\" Local Variables:
.\" fill-column: 72
.\" mode: nroff
.\" End:
.\" vim: set filetype=groff textwidth=72:

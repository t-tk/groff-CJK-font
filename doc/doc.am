# Copyright (C) 2002-2022 Free Software Foundation, Inc.
# Original Makefile.sub written by Werner Lemberg <wl@gnu.org>.
# Adapted to Automake by Bertrand Garrigues
#   (bertrand.garrigues@laposte.net).
#
# This file is part of groff.
#
# groff is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# groff is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

doc_srcdir = $(abs_top_srcdir)/doc
doc_builddir = $(abs_top_builddir)/doc

DOC_SED = $(SED) \
  -e "s;[@]VERSION[@];$(VERSION);" \
  -e "s;[@]g[@];$(g);g;"

DOC_GROFF_ONLY=\
  GROFF_COMMAND_PREFIX= \
  GROFF_BIN_PATH="$(GROFF_BIN_PATH)" \
  $(GROFFBIN) -M $(doc_srcdir) $(TFLAG) $(FFLAG) -pet -ww -b

# This image file is used by several documents in the groff source tree.
DOC_GNU_EPS=doc/gnu.eps

# A dance is required to embed a literal newline inside a sed expression
# inside a shell command executed as part of a Make target rule.
#
# Use the POSIX shell $'\n' feature when all platforms of interest
# support it.
#
#DOC_GROFF = $(DOC_SED) -e 1i\$$'\n'".lf 1 $<"$$'\n' $< \
#	| $(DOC_GROFF_ONLY)
#
# In the meantime, a shell variable must be prepared in each target rule
# shell command using $(DOC_SED).  This solution is adapted from the GNU
# Autoconf manual, "Newlines in Make Rules".
DOC_GROFF = nlinit=`echo 'nl="'; echo '"'`; eval "$$nlinit"; \
	  $(DOC_SED) -e "1i\\$$nl.lf 1 $<$$nl" $< | $(DOC_GROFF_ONLY)

# Other doc, installed in $(docdir)
if BUILD_OTHERDOC
# Files located in the source tree
DOCFILES_INST= \
  doc/me-revisions \
  doc/ms.ms \
  doc/pic.ms
DOCFILES_NOINST= \
  doc/meintro.me.in \
  doc/meintro_fr.me.in \
  doc/meref.me.in
# Files that undergo a transformation prior to groff processing
GENERATEDDOCFILES = \
  $(DOC_GNU_EPS) \
  doc/meintro.me \
  doc/meintro_fr.me \
  doc/meref.me
# Files generated in the build tree
PROCESSEDDOCFILES_PS = \
  doc/meref.ps \
  doc/meintro.ps \
  doc/meintro_fr.ps \
  doc/ms.ps \
  doc/pic.ps
PROCESSEDDOCFILES = $(PROCESSEDDOCFILES_PS) \
  doc/groff-man-pages.pdf \
  doc/groff-man-pages.utf8.txt

otherdocdir = $(docdir)
dist_otherdoc_DATA = $(DOCFILES_INST) $(GENERATEDDOCFILES)
nodist_otherdoc_DATA = $(PROCESSEDDOCFILES)
MOSTLYCLEANFILES += $(PROCESSEDDOCFILES)
else
EXTRA_DIST += $(DOCFILES_INST) $(GENERATEDDOCFILES)
endif
EXTRA_DIST += $(DOCFILES_NOINST)

# pdf doc, written in mom and therefore using contrib/mom/mom.am
# definitions
EXTRA_DIST += doc/automake.mom
if BUILD_PDFDOC
docpdfdocdir = $(pdfdocdir)
nodist_docpdfdoc_DATA = doc/automake.pdf
MOSTLYCLEANFILES += doc/automake.pdf
endif
doc/automake.pdf: doc/automake.mom \
  groff troff gropdf pdfmom font/devpdf/build_font_files \
  contrib/mom/om.tmac

# GNU PIC html documentation, installed in $(htmldocdir)
# Other pic*.html files are installed by the local rule
if BUILD_HTML
HTMLDOCFILES = \
  doc/pic.html
htmlpicdir = $(htmldocdir)
htmlpic_DATA = $(HTMLDOCFILES)
HTMLDOCFILESALL = pic*.html
HTMLDOCIMAGEFILES = pic*
endif

# Examples files, installed in $(exampledir)

# source tree files
EXAMPLEFILES = \
  doc/webpage.ms \
  doc/groff.css \
  doc/grnexmpl.g \
  doc/grnexmpl.me

if BUILD_EXAMPLES
# Generated in the build tree
PROCESSEDEXAMPLEFILES = \
  doc/webpage.ps \
  doc/grnexmpl.ps
docexamplesdir = $(exampledir)
dist_docexamples_DATA = $(EXAMPLEFILES)
nodist_docexamples_DATA = $(PROCESSEDEXAMPLEFILES)
MOSTLYCLEANFILES += $(PROCESSEDEXAMPLEFILES)
else
EXTRA_DIST += $(EXAMPLEFILES)
endif

if BUILD_HTMLEXAMPLES
# webpage.html is generated; webpage*.html files are installed by the
# local rule.
HTMLEXAMPLEFILES = doc/webpage.html
HTMLEXAMPLEFILESALL = webpage*.html
HTMLEXAMPLEIMAGEFILES = webpage*
htmlexamplesdir = $(exampledir)
nodist_htmlexamples_DATA = $(HTMLEXAMPLEFILES)
endif

imagedir = img
htmldocimagedir = $(htmldocdir)/img
exampleimagedir = $(exampledir)/img

MOSTLYCLEANFILES += doc/examples.stamp

EXTRA_DIST += \
  doc/txi-en.tex

# Introduce variables to house the groff man pages.  We break the list
# of page sources into multiple chunks because we have to load Swedish
# localization before formatting groff_mmse.7 and then reload English
# localization afterward.  This also serves as a test of groff locale
# switching; being lazy and shunting groff_mmse.7 off to the end of the
# document would not achieve this goal (and not loading Swedish
# localization at all to format it would be gauche).
GROFF_MAN_PAGES1 = \
  src/utils/addftinfo/addftinfo.1 \
  src/utils/afmtodit/afmtodit.1 \
  contrib/chem/chem.1 \
  src/preproc/eqn/eqn.1 \
  contrib/eqn2graph/eqn2graph.1 \
  contrib/gdiffmk/gdiffmk.1 \
  contrib/glilypond/glilypond.1 \
  contrib/gperl/gperl.1 \
  contrib/gpinyin/gpinyin.1 \
  contrib/grap2graph/grap2graph.1 \
  src/preproc/grn/grn.1 \
  src/devices/grodvi/grodvi.1 \
  src/roff/groff/groff.1 \
  src/utils/grog/grog.1 \
  src/devices/grohtml/grohtml.1 \
  src/devices/grolbp/grolbp.1 \
  src/devices/grolj4/grolj4.1 \
  src/devices/gropdf/gropdf.1 \
  src/devices/grops/grops.1 \
  src/devices/grotty/grotty.1 \
  src/devices/xditview/gxditview.1 \
  src/utils/hpftodit/hpftodit.1 \
  src/utils/indxbib/indxbib.1 \
  src/utils/lkbib/lkbib.1 \
  src/utils/lookbib/lookbib.1 \
  contrib/mm/mmroff.1 \
  src/preproc/eqn/neqn.1 \
  src/roff/nroff/nroff.1 \
  src/devices/gropdf/pdfmom.1 \
  contrib/pdfmark/pdfroff.1 \
  src/utils/pfbtops/pfbtops.1 \
  src/preproc/pic/pic.1 \
  contrib/pic2graph/pic2graph.1 \
  src/preproc/preconv/preconv.1 \
  src/preproc/refer/refer.1 \
  src/preproc/soelim/soelim.1 \
  src/preproc/tbl/tbl.1 \
  src/utils/tfmtodit/tfmtodit.1 \
  src/roff/troff/troff.1 \
  src/utils/xtotroff/xtotroff.1 \
  contrib/groff_filenames/groff_filenames.5 \
  man/groff_font.5 \
  man/groff_out.5 \
  man/groff_tmac.5 \
  src/devices/grolj4/lj4_font.5 \
  man/groff.7 \
  man/groff_char.7 \
  man/groff_diff.7 \
  contrib/hdtbl/groff_hdtbl.7 \
  tmac/groff_man.7 \
  tmac/groff_man_style.7 \
  tmac/groff_mdoc.7 \
  tmac/groff_me.7 \
  contrib/mm/groff_mm.7

GROFF_MAN_PAGES2 = \
  contrib/mm/groff_mmse.7

GROFF_MAN_PAGES3 = \
  contrib/mom/groff_mom.7 \
  tmac/groff_ms.7 \
  contrib/rfc1345/groff_rfc1345.7 \
  tmac/groff_trace.7 \
  tmac/groff_www.7 \
  man/roff.7

GROFF_MAN_PAGES_ALL = $(GROFF_MAN_PAGES1) $(GROFF_MAN_PAGES2) \
  $(GROFF_MAN_PAGES3)

# This is a convenience target for (re-)generating all the man pages.
man-all: $(GROFF_MAN_PAGES_ALL)

# ...and for cleaning them.
man-clean:
	$(RM) $(GROFF_MAN_PAGES_ALL)

doc/groff-man-pages.pdf: $(GROFF_MAN_PAGES_ALL)
	$(GROFF_V)$(DOC_GROFF_ONLY) -Tpdf -P-e -mandoc -rC1 \
	  -rCHECKSTYLE=3 $(GROFF_MAN_PAGES1) \
	  $(tmac_srcdir)/sv.tmac $(GROFF_MAN_PAGES2) \
	  $(tmac_srcdir)/en.tmac $(GROFF_MAN_PAGES3) > $@

doc/groff-man-pages.utf8.txt: $(GROFF_MAN_PAGES_ALL)
	$(GROFF_V)$(DOC_GROFF_ONLY) -Tutf8 -mandoc \
	  -rCHECKSTYLE=3 $(GROFF_MAN_PAGES1) \
	  $(tmac_srcdir)/sv.tmac $(GROFF_MAN_PAGES2) \
	  $(tmac_srcdir)/en.tmac $(GROFF_MAN_PAGES3) > $@

doc/meintro.me: $(doc_srcdir)/meintro.me.in
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_SED) $? >$@

doc/meintro_fr.me: $(doc_srcdir)/meintro_fr.me.in
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_SED) $? >$@

doc/meref.me: $(doc_srcdir)/meref.me.in
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_SED) $? >$@

$(PROCESSEDDOCFILES_PS): \
  $(dist_devpsfont_DATA) $(nodist_devpsfont_DATA)

# The me(7) intro French translation gets its own target rule because it
# needs the "-mfr" option.
SUFFIXES += _fr.me _fr.ps
_fr.me._fr.ps:
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_GROFF) -k -Tps -me -mfr >$@

# For simplicity, we always call preconv, grn, and eqn.
.me.ps:
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_GROFF) -k -Tps -ge -me >$@

.ms.ps:
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_GROFF) -Tps -ms >$@

doc/webpage.ps: $(DOC_GNU_EPS)
doc/webpage.ps: doc/webpage.ms
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_GROFF) -I $(doc_builddir) -I $(doc_srcdir) -Tps -ms \
	  -mwww >$@

$(PROCESSEDEXAMPLEFILES) $(PROCESSEDDOCFILES): \
  $(bin_PROGRAMS) \
  $(prefixexecbin_PROGRAMS) \
  $(hdtbltmac_DATA) \
  $(dist_tmac_DATA) $(nodist_tmac_DATA)

doc/pic.html: tmac/www.tmac
doc/pic.html: $(bin_PROGRAMS) $(prefixexecbin_PROGRAMS)
doc/pic.html: doc/examples.stamp
doc/pic.html: $(dist_devpsfont_DATA) $(nodist_devpsfont_DATA)
doc/pic.html: $(doc_srcdir)/pic.ms $(devhtmlfont_DATA)
	$(GROFF_V)$(MKDIR_P) $(doc_builddir) \
	&& cd $(doc_builddir) \
	&& nlinit=`echo 'nl="'; echo '"'`; eval "$$nlinit"; \
	  $(DOC_SED) -e "1i\\$$nl.lf 1 $(doc_srcdir)/pic.ms$$nl" \
	  $(doc_srcdir)/pic.ms \
	   | $(DOC_GROFF_ONLY) -P-Ipic -P-D$(imagedir) -P-jpic \
	                       -Thtml -ms > pic.html

doc/examples.stamp: doc/groff.css
	$(AM_V_at)$(MKDIR_P) $(doc_builddir)
	$(AM_V_at)test -f $(doc_builddir)/groff.css || \
	  cp $(doc_srcdir)/groff.css $(doc_builddir)
	$(AM_V_at)echo timestamp > $@

doc/webpage.html: $(bin_PROGRAMS) $(prefixexecbin_PROGRAMS)
doc/webpage.html: doc/examples.stamp $(devhtmlfont_DATA)
doc/webpage.html: $(dist_devpsfont_DATA) $(nodist_devpsfont_DATA)
doc/webpage.html: \
  $(doc_srcdir)/webpage.ms \
  $(DOC_GNU_EPS) \
  $(doc_srcdir)/groff.css
	$(GROFF_V)$(MKDIR_P) doc \
	&& cd $(doc_builddir) \
	&& nlinit=`echo 'nl="'; echo '"'`; eval "$$nlinit"; \
	  $(DOC_SED) -e "1i\\$$nl.lf 1 $(doc_srcdir)/webpage.ms$$nl" \
	  $(doc_srcdir)/webpage.ms \
	   | $(DOC_GROFF_ONLY) -I $(doc_builddir) -I $(doc_srcdir) \
	     -P-jwebpage -P-nrb -P-Iwebpage -P-D$(imagedir) -Thtml -ms \
	     > webpage.html

doc/grnexmpl.ps: $(doc_srcdir)/grnexmpl.me $(doc_srcdir)/grnexmpl.g \
  grn eqn
	$(GROFF_V)$(MKDIR_P) `dirname $@` \
	&& $(DOC_GROFF_ONLY) -Tps -ge -me $(doc_srcdir)/grnexmpl.me >$@

# Note that we remove groff.css only if out-of-source build tree
mostlyclean-local: mostlyclean_doc
mostlyclean_doc:
if BUILD_HTML
	if test -d $(doc_builddir); then \
	  cd $(doc_builddir) && \
	  for f in $(HTMLDOCFILESALL); do \
	    $(RM) $$f; \
	  done; \
	fi
	if test -d $(doc_builddir)/$(imagedir); then \
	  cd $(doc_builddir)/$(imagedir) && \
	  for f in $(HTMLDOCIMAGEFILES); do \
	    $(RM) $$f; \
	  done; \
	  rmdir  $(doc_builddir)/$(imagedir) || :; \
	fi
endif
	if test $(top_builddir) != $(top_srcdir); then \
	  $(RM) $(top_builddir)/doc/groff.css; \
	fi

if BUILD_HTMLEXAMPLES
	if test -d $(doc_builddir); then \
	  cd $(doc_builddir) && \
	  for f in $(HTMLEXAMPLEFILESALL); do \
	    $(RM) $$f; \
	  done; \
	fi
	if test -d $(doc_builddir)/$(imagedir); then \
	  cd $(doc_builddir)/$(imagedir) && \
	  for f in $(HTMLEXAMPLEIMAGEFILES); do \
	    $(RM) $$f; \
	  done; \
	  rmdir  $(doc_builddir)/$(imagedir) || :; \
	fi
endif

install-data-hook: install_doc_htmldoc
install_doc_htmldoc:
if BUILD_HTML
	cd $(doc_builddir) && \
	for f in `ls $(HTMLDOCFILESALL)`; do \
	  $(RM) $(DESTDIR)$(htmldocdir)/$$f; \
	  $(INSTALL_DATA) $$f $(DESTDIR)$(htmldocdir)/$$f; \
	done
	-test -d $(DESTDIR)$(htmldocimagedir) \
	  || $(mkinstalldirs) $(DESTDIR)$(htmldocimagedir)
	$(RM) $(DESTDIR)$(htmldocimagedir)/$(HTMLDOCIMAGEFILES)
	$(INSTALL_DATA) \
	  $(doc_builddir)/$(imagedir)/$(HTMLDOCIMAGEFILES) \
	  $(DESTDIR)$(htmldocimagedir)
endif

install-data-hook: install_doc_gnu_eps install_doc_examples

install_doc_gnu_eps: $(DOC_GNU_EPS)
	for d in $(doc_builddir) $(doc_srcdir); do \
	  if test -f "$$d/gnu.eps"; then \
	    $(RM) $(DESTDIR)$(exampledir)/gnu.eps; \
	    $(INSTALL_DATA) \
	      $$d/gnu.eps $(DESTDIR)$(exampledir)/gnu.eps; \
	    break; \
	  fi; \
	done

install_doc_examples: $(DOC_GNU_EPS)
if BUILD_HTMLEXAMPLES
	cd $(doc_builddir) && \
	for f in `ls $(HTMLEXAMPLEFILESALL)`; do \
	  $(RM) $(DESTDIR)$(exampledir)/$$f; \
	  $(INSTALL_DATA) $$f $(DESTDIR)$(exampledir)/$$f; \
	done
	-test -d $(DESTDIR)$(exampleimagedir) \
	  || $(mkinstalldirs) $(DESTDIR)$(exampleimagedir)
	$(RM) $(DESTDIR)$(exampleimagedir)/$(HTMLEXAMPLEIMAGEFILES)
	$(INSTALL_DATA) \
	  $(doc_builddir)/$(imagedir)/$(HTMLEXAMPLEIMAGEFILES) \
	  $(DESTDIR)$(exampleimagedir)
endif

uninstall-hook: \
  uninstall_doc_examples uninstall_doc_htmldoc uninstall_mom
uninstall_doc_examples:
if BUILD_EXAMPLES
	$(RM) -f $(DESTDIR)$(exampledir)/gnu.eps
endif
if BUILD_HTMLEXAMPLES
	-test -d $(DESTDIR)$(docexamplesdir) && \
	cd $(DESTDIR)$(docexamplesdir) && \
	for f in $(HTMLEXAMPLEFILESALL); do \
	  $(RM) $$f; \
	done
	-test -d $(DESTDIR)$(docexamplesdir)/$(imagedir) && \
	cd $(DESTDIR)$(docexamplesdir)/$(imagedir) && \
	for f in $(HTMLEXAMPLEIMAGEFILES); do \
	  $(RM) $$f; \
	done
	-rmdir $(DESTDIR)$(docexamplesdir)/$(imagedir)
	-rmdir $(DESTDIR)$(docexamplesdir)
endif

uninstall_doc_htmldoc:
if BUILD_HTML
	-test -d $(DESTDIR)$(htmldocdir) && \
	cd $(DESTDIR)$(htmldocdir) && \
	for f in $(HTMLDOCFILESALL); do \
	  $(RM) $$f; \
	done
	-test -d $(DESTDIR)$(htmldocdir)/$(imagedir) && \
	cd $(DESTDIR)$(htmldocdir)/$(imagedir) && \
	for f in $(HTMLDOCIMAGEFILES); do \
	  $(RM) $$f; \
	done
	-rmdir $(DESTDIR)$(htmldocdir)/$(imagedir)
	-rmdir $(DESTDIR)$(htmldocdir)
endif

# groff Texinfo manual
#
# We can produce some formats of the manual using only 'makeinfo': GNU
# info, plain text, and HTML.  Produce all of these by default and ship
# them in the distribution archive ('make dist') so that people don't
# need to have 'makeinfo' available.
#
# Other formats are suitable for hard copy and require a working TeX
# installation.  We can't use Automake's facilities for PDF production
# because the 'dist' target attempts to generate 'groff.pdf' by invoking
# 'texi2dvi' without the '-E' option (use 'makeinfo' to expand macros),
# which is needed to build this file.  'texi2dvi' honors the 'MAKEINFO'
# environment variable.
#
# Were the foregoing not true, we would simply say this:
#info_TEXINFOS = doc/groff.texi
#doc_groff_TEXINFOS = doc/fdl.texi
#
# The GNU Coding Standards require only installation of documentation in
# Info format.  This can still be disabled by passing
#   --with-doc=<something other than "info" or "yes">
# to configure.

all: build_infodoc

# Provide the manual in source form.
EXTRA_DIST += doc/groff.texi doc/fdl.texi

# Define targets to generate GNU Info, plain text, and HTML from .texi.
build_infodoc: doc/groff.info doc_txt doc_html

EXTRA_DIST += doc/groff.info
MAINTAINERCLEANFILES += doc/groff.info
doc/groff.info: $(doc_srcdir)/groff.texi
	$(AM_V_at)$(MKDIR_P) $(doc_builddir)
	$(AM_V_GEN)LANG=C \
	LC_ALL=C \
	$(MAKEINFO) -o doc/groff.info --enable-encoding \
	  -I$(doc_srcdir) $(doc_srcdir)/groff.texi

# Distribute the Info files.
dist-hook: dist-info-bits
dist-info-bits:
	chmod u+w $(distdir)/doc
	for d in $(doc_builddir) $(doc_srcdir); do \
	  if [ -f "$$d"/groff.info ]; then \
	    cp -f "$$d"/groff.info-* $(distdir)/doc; \
	  fi; \
	  break; \
	done

EXTRA_DIST += doc/groff.txt
MAINTAINERCLEANFILES += doc/groff.txt
.texi.txt:
	$(AM_V_at)$(MKDIR_P) $(doc_builddir)
	$(AM_V_GEN)LANG=C \
	LC_ALL=C \
	$(MAKEINFO) --enable-encoding -I$(doc_srcdir) --plaintext \
	  -o $@ $<

# Generate HTML, both split into several files, and as a single file.
# 'html' and its installation counterpart 'install-html' are standard
# Automake targets.
EXTRA_DIST += doc/groff.html doc/groff.html.node
MAINTAINERCLEANFILES += doc/groff.html doc/groff.html.node
.texi.html:
	$(AM_V_at)$(MKDIR_P) $(doc_builddir)/
	$(AM_V_GEN)LANG=C \
	LC_ALL=C \
	$(MAKEINFO) --html -I $(doc_srcdir) \
	  -o doc/`basename $@`.node $<
	$(AM_V_at)LANG=C \
	LC_ALL=C \
	$(MAKEINFO) --html -I $(doc_srcdir) --no-split \
	  -o $@ $<

# GNU Make has a built-in variable TEXI2DVI, but that is not true of
# all 'make' implementations.  As it defaults to 'texi2dvi', we (at
# worst) harmlessly redefine it here.
TEXI2DVI = texi2dvi

# Define pattern rules to make our Texinfo manual in DVI and PDF
# formats.  These are not built by default.  'pdf' and 'dvi' and their
# installation counterparts 'install-pdf' and 'install-dvi' are standard
# Automake targets.
.texi.dvi:
if HAVE_TEXI2DVI
	$(AM_V_at)$(MKDIR_P) $(doc_builddir)
	$(AM_V_GEN)LANG=C \
	LC_ALL=C \
	TEXINPUTS="$(top_srcdir)/build-aux:$(TEXINPUTS)" \
	MAKEINFO='$(MAKEINFO) -I $(doc_srcdir)' \
	FORCE_SOURCE_DATE=1 \
	$(TEXI2DVI) -e --batch --build-dir=doc/`basename $@`.t2d \
	  -o $@ $<
else
	@echo "program texi2dvi is missing or too old;" \
	  "cannot generate $@" >&2; \
	exit 1
endif

.texi.pdf:
if HAVE_TEXI2DVI
	$(AM_V_at)$(MKDIR_P) $(doc_builddir)
	$(AM_V_GEN)LANG=C \
	LC_ALL=C \
	TEXINPUTS="$(top_srcdir)/build-aux:$(TEXINPUTS)" \
	MAKEINFO='$(MAKEINFO) -I $(doc_srcdir)' \
	$(TEXI2DVI) -e --batch --pdf --build-dir=doc/`basename $@`.t2p \
	  -o $@ $<
else
	@echo "program texi2dvi is missing or too old;" \
	  "cannot generate $@" >&2; \
	exit 1
endif

doc: doc_all
doc_all: dvi pdf
doc_txt: doc/groff.txt
dvi: doc_dvi
doc_dvi: doc/groff.dvi
pdf: doc_pdf
doc_pdf: doc/groff.pdf
html: doc_html
doc_html: doc/groff.html
install-doc: install-pdf install-html

distclean-local: clean_infodoc clean_otherdoc
maintainer-clean-local: clean_infodoc clean_otherdoc clean_maintdoc
clean_infodoc:
	-$(RM) $(doc_builddir)/groff.info*
	-$(RM) $(doc_builddir)/groff.pdf
	-$(RM) $(doc_builddir)/groff.dvi
	-$(RM) -r $(doc_builddir)/groff.html.*
clean_otherdoc:
	-cd $(doc_builddir) && \
	  $(RM) -r *.pdf *.html *.txt *.dvi *.t2p *.t2d
clean_maintdoc:
	-$(RM) $(DOC_GNU_EPS)

install-data-local: install_infodoc
install_infodoc: doc/groff.info
	-test -d $(DESTDIR)$(infodir) \
	  || $(mkinstalldirs) $(DESTDIR)$(infodir)
	$(RM) $(DESTDIR)/doc/groff.info*
	for d in $(doc_builddir) $(doc_srcdir); do \
	  if [ -f "$$d"/groff.info ]; then \
	    cp "$$d"/groff.info* $(DESTDIR)$(infodir); \
	    $(INSTALL_INFO) --info-file="$$d"/groff.info \
	      --info-dir=$(DESTDIR)$(infodir); \
	  fi; \
	  break; \
	done
install-pdf-local: doc/groff.pdf
	-test -d $(DESTDIR)$(pdfdocdir) \
	  || $(mkinstalldirs) $(DESTDIR)$(pdfdocdir)
	cp $(top_builddir)/doc/groff.pdf $(DESTDIR)$(pdfdocdir)
install-html-local: doc/groff.html
	-test -d $(DESTDIR)$(htmldocdir)/groff.html.mono \
	  || $(mkinstalldirs) $(DESTDIR)$(htmldocdir)/groff.html.mono
	cp -r $(top_builddir)/doc/groff.html \
	  $(DESTDIR)$(htmldocdir)/groff.html.mono
	cp -r $(top_builddir)/doc/groff.html.node \
	  $(DESTDIR)$(htmldocdir)

uninstall-local: uninstall_infodoc uninstall-pdf uninstall-html
uninstall_doc: uninstall-local
uninstall-doc: uninstall-local
uninstall_infodoc:
	-$(INSTALL_INFO) --remove --info-dir=$(DESTDIR)$(infodir) \
	  $(DESTDIR)$(infodir)/groff.info
	-for f in `ls $(DESTDIR)$(infodir)/groff.info*`; do \
	  $(RM) $$f; \
	done
uninstall-pdf:
	-$(RM) -f $(DESTDIR)$(pdfdocdir)/groff.pdf 
uninstall-html:
	-$(RM) -r $(DESTDIR)$(htmldocdir)/groff.html.*

# An image of a gnu in enscapsulated PostScript is generated during the
# build process if possible.
EXTRA_DIST += doc/gnu.xpm
$(DOC_GNU_EPS): doc/gnu.xpm
	$(AM_V_GEN)if test -f $(top_srcdir)/doc/gnu.eps; then \
	  cp $(top_srcdir)/doc/gnu.eps . ; \
	elif test -f $(top_builddir)/doc/gnu.eps; then \
	  cp $(top_builddir)/doc/gnu.eps . ; \
	else \
	  if test ""$(XPMTOPPM) != "found"; then \
	    echo "program xpmtoppm is missing; can't generate $@" >&2;\
	    exit 1; \
	  fi; \
	  if test ""$(pnmtops) != "found"; then \
	    echo "program pnmtops is missing; can't generate $@" >&2;\
	    exit 1; \
	  fi; \
	  if ! echo "$(pnmtops_nosetpage)" | grep -q nosetpage; then \
	    echo "program pnmtops can't handle -nosetpage option;" \
	      "can't generate $@" >&2;\
	    exit 1; \
	  fi; \
	  xpmtoppm $(top_srcdir)/doc/gnu.xpm | pnmdepth 15 \
	    | $(pnmtops_nosetpage) -noturn -rle >$@ ; \
	fi
	$(AM_V_GEN)test -f $(top_builddir)/doc/gnu.eps

# Provide a copy of the image in the distribution archive to accommodate
# systems without a tool to generate it from an X pixmap.
dist-hook: dist-gnueps
dist-gnueps:
	chmod u+w $(distdir)/doc
	for d in $(doc_builddir) $(doc_srcdir); do \
	  if [ -f "$$d"/$(DOC_GNU_EPS) ]; then \
	    cp -f "$$d"/$(DOC_GNU_EPS) $(distdir)/doc; \
	  fi; \
	  break; \
	done


# Local Variables:
# fill-column: 72
# mode: makefile-automake
# End:
# vim: set autoindent filetype=automake textwidth=72:
